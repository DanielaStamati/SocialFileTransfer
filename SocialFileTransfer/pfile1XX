package models;


import javax.swing.*;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.*;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Server extends SwingWorker<Object, Object >{

	public static int BUF_SIZE	= 1400; // buffer size
	public static String IP	;	// server IP
	public static int PORT;		// server port
    static ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());


    public Server(String IP, int PORT) {

        this.IP = IP;
        this.PORT = PORT;

    }

	public static void accept(SelectionKey key) throws IOException {

		System.out.print("ACCEPT: ");

        ByteBuffer buf = ByteBuffer.allocateDirect(BUF_SIZE);
        ServerSocketChannel serverSocketChannel = (ServerSocketChannel)key.channel();   // initialize from key

        SocketChannel socketChannel = serverSocketChannel.accept();				        // initialize from accept

        socketChannel.configureBlocking(false);
        socketChannel.register(key.selector(), SelectionKey.OP_READ);


        // display remote client address
		System.out.println("Connection from: " + socketChannel.socket().getRemoteSocketAddress());
	}

	public static void read(SelectionKey key) throws IOException {

		System.out.print("READ SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        ByteBuffer buff = ByteBuffer.allocateDirect(BUF_SIZE);

        while(socketChannel.read(buff) > 0){

        }

        socketChannel.register(key.selector(), SelectionKey.OP_WRITE, buff);


    }

	public static void write(SelectionKey key) throws IOException {

        System.out.print("WRITE SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        String filename = "";


        ByteBuffer buf = (ByteBuffer) key.attachment();

        buf.flip();
        String encoding = System.getProperty("file.encoding");
        filename = Charset.forName(encoding).decode(buf).toString();

        RandomAccessFile fromFile = new RandomAccessFile(filename, "rw");
        FileChannel fc = fromFile.getChannel();
        buf = ByteBuffer.allocateDirect(BUF_SIZE);

        while (fc.read(buf) >= 0 || buf.position() > 0) {
            buf.flip();
            socketChannel.write(buf);
            buf.clear();
        }

        fc.close();
        fromFile.close();
        socketChannel.close();


	}

	public Object doInBackground() {

		Selector selector						= null;
		ServerSocketChannel serverSocketChannel	= null;

		try {

            selector = Selector.open();

            serverSocketChannel = ServerSocketChannel.open();
            serverSocketChannel.configureBlocking(false);
            serverSocketChannel.socket().bind(new InetSocketAddress(IP, PORT));
            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);


			// main loop
			while (true) {
				// wait for something to happen

                selector.select();

				// iterate over the events
				for (Iterator<SelectionKey> it = selector.selectedKeys().iterator(); it.hasNext(); ) {
					// get current event and REMOVE it from the list!!!
					SelectionKey key = it.next();
					it.remove();

					if (key.isAcceptable())
                        accept(key);
					else if (key.isReadable())
						read(key);
					else if (key.isWritable())
						write(key);
				}
			}

		} catch (IOException e) {
			e.printStackTrace();

		} finally {
			// cleanup
			if (selector != null)
				try {
					selector.close();
				} catch (IOException e) {}

			if (serverSocketChannel != null)
				try {
					serverSocketChannel.close();
				} catch (IOException e) {}
		}
        return null;
	}

}
package models;


import javax.swing.*;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.*;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Server extends SwingWorker<Object, Object >{

	public static int BUF_SIZE	= 1400; // buffer size
	public static String IP	;	// server IP
	public static int PORT;		// server port
    static ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());


    public Server(String IP, int PORT) {

        this.IP = IP;
        this.PORT = PORT;

    }

	public static void accept(SelectionKey key) throws IOException {

		System.out.print("ACCEPT: ");

        ByteBuffer buf = ByteBuffer.allocateDirect(BUF_SIZE);
        ServerSocketChannel serverSocketChannel = (ServerSocketChannel)key.channel();   // initialize from key

        SocketChannel socketChannel = serverSocketChannel.accept();				        // initialize from accept

        socketChannel.configureBlocking(false);
        socketChannel.register(key.selector(), SelectionKey.OP_READ);


        // display remote client address
		System.out.println("Connection from: " + socketChannel.socket().getRemoteSocketAddress());
	}

	public static void read(SelectionKey key) throws IOException {

		System.out.print("READ SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        ByteBuffer buff = ByteBuffer.allocateDirect(BUF_SIZE);

        while(socketChannel.read(buff) > 0){

        }

        socketChannel.register(key.selector(), SelectionKey.OP_WRITE, buff);


    }

	public static void write(SelectionKey key) throws IOException {

        System.out.print("WRITE SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        String filename = "";


        ByteBuffer buf = (ByteBuffer) key.attachment();

        buf.flip();
        String encoding = System.getProperty("file.encoding");
        filename = Charset.forName(encoding).decode(buf).toString();

        RandomAccessFile fromFile = new RandomAccessFile(filename, "rw");
        FileChannel fc = fromFile.getChannel();
        buf = ByteBuffer.allocateDirect(BUF_SIZE);

        while (fc.read(buf) >= 0 || buf.position() > 0) {
            buf.flip();
            socketChannel.write(buf);
            buf.clear();
        }

        fc.close();
        fromFile.close();
        socketChannel.close();


	}

	public Object doInBackground() {

		Selector selector						= null;
		ServerSocketChannel serverSocketChannel	= null;

		try {

            selector = Selector.open();

            serverSocketChannel = ServerSocketChannel.open();
            serverSocketChannel.configureBlocking(false);
            serverSocketChannel.socket().bind(new InetSocketAddress(IP, PORT));
            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);


			// main loop
			while (true) {
				// wait for something to happen

                selector.select();

				// iterate over the events
				for (Iterator<SelectionKey> it = selector.selectedKeys().iterator(); it.hasNext(); ) {
					// get current event and REMOVE it from the list!!!
					SelectionKey key = it.next();
					it.remove();

					if (key.isAcceptable())
                        accept(key);
					else if (key.isReadable())
						read(key);
					else if (key.isWritable())
						write(key);
				}
			}

		} catch (IOException e) {
			e.printStackTrace();

		} finally {
			// cleanup
			if (selector != null)
				try {
					selector.close();
				} catch (IOException e) {}

			if (serverSocketChannel != null)
				try {
					serverSocketChannel.close();
				} catch (IOException e) {}
		}
        return null;
	}

}
package models;


import javax.swing.*;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.*;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Server extends SwingWorker<Object, Object >{

	public static int BUF_SIZE	= 1400; // buffer size
	public static String IP	;	// server IP
	public static int PORT;		// server port
    static ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());


    public Server(String IP,cket().getRemoteSocketAddress());
	}

	public static void read(SelectionKey key) throws IOException {

		System.out.print("READ SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        ByteBuffer buff = ByteBuffer.allocateDirect(BUF_SIZE);

        while(socketChannel.read(buff) > 0){

        }

        socketChannel.register(key.selector(), SelectionKey.OP_WRITE, buff);


    }

	public static void write(SelectionKey key) throws IOException {

        System.out.print("WRITE SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        String filename = "";


        ByteBuffer buf = (ByteBuffer) key.attachment();

        buf.flip();
        String encoding = System.getProperty("file.encoding");
        filename = Charset.forName(encoding).decode(buf).toString();

        RandomAccessFile fromFile = new RandomAccessFile(filename, "rw");
        FileChannel fc = fromFile.getChannel();
        buf = ByteBuffer.allocateDirect(BUF_SIZE);

        while (fc.read(buf) >= 0 || buf.position() > 0) {
            buf.flip();
            socketChannel.write(buf);
            buf.clear();
        }

        fc.close();
        fromFile.close();
        socketChannel.close();


	}

	public Object doInBackground() {

		Selector selector						= null;
		ServerSocketChannel serverSocketChannel	= null;

		try {

            selector = Srent.ExecutorService;
import java.util.concurrent.Executors;

public class Server extends SwingWorker<Object, Object >{

	public static int BUF_SIZE	= 1400; // buffer size
	public static String IP	;	// server IP
	public static int PORT;		// server port
    static ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());


    public Server(String IP, int PORT) {

        this.IP = IP;
        this.PORT = PORT;

    }

	public static void accept(SelectionKey key) throws IOException {

		System.out.print("ACCEPT: ");

        ByteBuffer buf = ByteBuffer.allocateDirect(BUF_SIZE);
        ServerSocketChannel serverSocketChannel = (ServerSocketChannel)key.channel();   // initialize from key

        SocketChannel socketChannel = serverSocketChannel.accept();				        // initialize from accept

        socketChannel.configureBlocking(false);
        socketChannel.register(key.selector(), SelectionKey.OP_READ);


        // display remote client address
		System.out.println("Connection from: " + socketChannel.socket().getRemoteSocketAddress());
	}

	public static void read(SelectionKey key) throws IOException {

		System.out.print("READ SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        ByteBuffer buff = ByteBuffer.allocateDirect(BUF_SIZE);

        while(socketChannel.read(buff) > 0){

        }

                        accept(key);
					else if (key.isReadable())
						read(key);
					else if (key.isWritable())
						write(key);
				}
			}

		} catch (IOException e) {
			e.printStackTrace();

		} finally {
			// cleanup
			if (selector != null)
				try {
					selector.close();
				} catch (IOException e) {}

			if (serverSocketChannel != null)
				try {
					serverSocketChannel.close();
				} catch (IOException e) {}
		}
        return null;
	}

}
package models;


import javax.swing.*;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.*;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Server extends SwingWorker<Object, Object >{

	public static int BUF_SIZE	= 1400; // buffer size
	public static String IP	;	// server IP
	public static int PORT;		// server port
    static ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());


    public Server(String IP, int PORT) {

        this.IP = IP;
        this.PORT = PORT;

    }

	public static void accept(SelectionKey key) throws IOException {

		System.out.print("ACCEPT: ");

        ByteBuffer buf = ByteBuffer.allocateDirect(BUF_SIZE);
        ServerSocketChannel serverSocketCha);

        while (fc.read(buf) >= 0 || buf.position() > 0) {
            buf.flip();
            socketChannel.write(buf);
            buf.clear();
        }

        fc.close();
        fromFile.close();
        socketChannel.close();


	}

	public Object doInBackground() {

		Selector selector						= null;
		ServerSocketChannel serverSocketChannel	= null;

		try {

            selector = Selector.open();

            serverSocketChannel = ServerSocketChannel.open();
            serverSocketChannel.configureBlocking(false);
            serverSocketChannel.socket().bind(new InetSocketAddress(IP, PORT));
            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);


			// main loop
			while (true) {
				// wait for something to happen

                selector.select();

				// iterate over the events
				for (Iterator<SelectionKey> it = selector.selectedKeys().iterator(); it.hasNext(); ) {
					// get current event and REMOVE it from the list!!!
					SelectionKey key = it.next();
					it.remove();

					if (key.isAcceptable())
                        accept(key);
					else if (key.isReadable())
						read(key);
					else if (key.isWritable())
						write(key);
				}
			}

		} catch (IOException e) {
			e.printStackTrace();

		} finally {
			// cleanup
			if (selector != null)
				try {
					selector.close();
				} catch (IOException e) {}

			if (serverSocketCha
		System.out.println("Connection from: " + socketChannel.socket().getRemoteSocketAddress());
	}

	public static void read(SelectionKey key) throws IOException {

		System.out.print("READ SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        ByteBuffer buff = ByteBuffer.allocateDirect(BUF_SIZE);

        while(socketChannel.read(buff) > 0){

        }

        socketChannel.register(key.selector(), SelectionKey.OP_WRITE, buff);


    }

	public static void write(SelectionKey key) throws IOException {

        System.out.print("WRITE SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        String filename = "";


        ByteBuffer buf = (ByteBuffer) key.attachment();

        buf.flip();
        String encoding = System.getProperty("file.encoding");
        filename = Charset.forName(encoding).decode(buf).toString();

        RandomAccessFile fromFile = new RandomAccessFile(filename, "rw");
        FileChannel fc = fromFile.getChannel();
        buf = ByteBuffer.allocateDirect(BUF_SIZE);

        while (fc.read(buf) >= 0 || buf.position() > 0) {
            buf.flip();
            socketChannel.write(buf);
            buf.clear();
        }

        fc.close();
        fromFile.close();
        socketChannel.close();


	}

	public Object doInBackground() {

		Selector selector						= null;
		ServerSocketChannel se     while(socketChannel.read(buff) > 0){

        }

        socketChannel.register(key.selector(), SelectionKey.OP_WRITE, buff);


    }

	public static void write(SelectionKey key) throws IOException {

        System.out.print("WRITE SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        String filename = "";


        ByteBuffer buf = (ByteBuffer) key.attachment();

        buf.flip();
        String encoding = System.getProperty("file.encoding");
        filename = Charset.forName(encoding).decode(buf).toString();

        RandomAccessFile fromFile = new RandomAccessFile(filename, "rw");
        FileChannel fc = fromFile.getChannel();
        buf = ByteBuffer.allocateDirect(BUF_SIZE);

        while (fc.read(buf) >= 0 || buf.position() > 0) {
            buf.flip();
            socketChannel.write(buf);
            buf.clear();
        }

        fc.close();
        fromFile.close();
        socketChannel.close();


	}

	public Object doInBackground() {

		Selector selector						= null;
		ServerSocketChannel serverSocketChannel	= null;

		try {

            selector = Selector.open();

            serverSocketChannel = ServerSocketChannel.open();
            serverSocketChannel.configureBlocking(false);
            serverSocketChannel.socket().bind(new InetSocketAddress(IP, PORT));
            serverSocketChannel.register(selector, Selecti0 || buf.position() > 0) {
            buf.flip();
            socketChannel.write(buf);
            buf.clear();
        }

        fc.close();
        fromFile.close();
        socketChannel.close();


	}

	public Object doInBackground() {

		Selector selector						= null;
		ServerSocketChannel serverSocketChannel	= null;

		try {

            selector = Selector.open();

            serverSocketChannel = ServerSocketChannel.open();
            serverSocketChannel.configureBlocking(false);
            serverSocketChannel.socket().bind(new InetSocketAddress(IP, PORT));
            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);


			// main loop
			while (true) {
				// wait for something to happen

                selector.select();

				// iterate over the events
				for (Iterator<SelectionKey> it = selector.selectedKeys().iterator(); it.hasNext(); ) {
					// get current event and REMOVE it from the list!!!
					SelectionKey key = it.next();
					it.remove();

					if (key.isAcceptable())
                        accept(key);
					else if (key.isReadable())
						read(key);
					else if (key.isWritable())
						write(key);
				}
			}

		} catch (IOException e) {
			e.printStackTrace();

		} finally {
			// cleanup
			if (selector != null)
				try {
					selector.close();
				} catch (IOException e) {}

			if (serverSocketChannel != null)
				try {
					server.open();
            serverSocketChannel.configureBlocking(false);
            serverSocketChannel.socket().bind(new InetSocketAddress(IP, PORT));
            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);


			// main loop
			while (true) {
				// wait for something to happen

                selector.select();

				// iterate over the events
				for (Iterator<SelectionKey> it = selector.selectedKeys().iterator(); it.hasNext(); ) {
					// get current event and REMOVE it from the list!!!
					SelectionKey key = it.next();
					it.remove();

					if (key.isAcceptable())
                        accept(key);
					else if (key.isReadable())
						read(key);
					else if (key.isWritable())
						write(key);
				}
			}

		} catch (IOException e) {
			e.printStackTrace();

		} finally {
			// cleanup
			if (selector != null)
				try {
					selector.close();
				} catch (IOException e) {}

			if (serverSocketChannel != null)
				try {
					serverSocketChannel.close();
				} catch (IOException e) {}
		}
        return null;
	}

}
package models;


import javax.swing.*;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.*;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public c


    }

	public static void write(SelectionKey key) throws IOException {

        System.out.print("WRITE SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        String filename = "";


        ByteBuffer buf = (ByteBuffer) key.attachment();

        buf.flip();
        String encoding = System.getProperty("file.encoding");
        filename = Charset.forName(encoding).decode(buf).toString();

        RandomAccessFile fromFile = new RandomAccessFile(filename, "rw");
        FileChannel fc = fromFile.getChannel();
        buf = ByteBuffer.allocateDirect(BUF_SIZE);

        while (fc.read(buf) >= 0 || buf.position() > 0) {
            buf.flip();
            socketChannel.write(buf);
            buf.clear();
        }

        fc.close();
        fromFile.close();
        socketChannel.close();


	}

	public Object doInBackground() {

		Selector selector						= null;
		ServerSocketChannel serverSocketChannel	= null;

		try {

            selector = Selector.open();

            serverSocketChannel = ServerSocketChannel.open();
            serverSocketChannel.configureBlocking(false);
            serverSocketChannel.socket().bind(new InetSocketAddress(IP, PORT));
            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);


			// main loop
			while (true) {
				// wait for something to happen

                selector.select();

			 {

        this.IP = IP;
        this.PORT = PORT;

    }

	public static void accept(SelectionKey key) throws IOException {

		System.out.print("ACCEPT: ");

        ByteBuffer buf = ByteBuffer.allocateDirect(BUF_SIZE);
        ServerSocketChannel serverSocketChannel = (ServerSocketChannel)key.channel();   // initialize from key

        SocketChannel socketChannel = serverSocketChannel.accept();				        // initialize from accept

        socketChannel.configureBlocking(false);
        socketChannel.register(key.selector(), SelectionKey.OP_READ);


        // display remote client address
		System.out.println("Connection from: " + socketChannel.socket().getRemoteSocketAddress());
	}

	public static void read(SelectionKey key) throws IOException {

		System.out.print("READ SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        ByteBuffer buff = ByteBuffer.allocateDirect(BUF_SIZE);

        while(socketChannel.read(buff) > 0){

        }

        socketChannel.register(key.selector(), SelectionKey.OP_WRITE, buff);


    }

	public static void write(SelectionKey key) throws IOException {

        System.out.print("WRITE SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        String filename = "";


        ByteBuffer buf = (ByteBuffer) key.attachment();

        buf.flip();
        String encoding = System.getPread(key);
					else if (key.isWritable())
						write(key);
				}
			}

		} catch (IOException e) {
			e.printStackTrace();

		} finally {
			// cleanup
			if (selector != null)
				try {
					selector.close();
				} catch (IOException e) {}

			if (serverSocketChannel != null)
				try {
					serverSocketChannel.close();
				} catch (IOException e) {}
		}
        return null;
	}

}
package models;


import javax.swing.*;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.*;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Server extends SwingWorker<Object, Object >{

	public static int BUF_SIZE	= 1400; // buffer size
	public static String IP	;	// server IP
	public static int PORT;		// server port
    static ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());


    public Server(String IP, int PORT) {

        this.IP = IP;
        this.PORT = PORT;

    }

	public static void accept(SelectionKey key) throws IOException {

		System.out.print("ACCEPT: ");

        ByteBuffer buf = ByteBuffer.allocateDirect(BUF_SIZE);
        ServerSocketChannel serverSocketChannel = (ServerSocketChannel)key.channel();   // initialize from key

     buf.flip();
            socketChannel.write(buf);
            buf.clear();
        }

        fc.close();
        fromFile.close();
        socketChannel.close();


	}

	public Object doInBackground() {

		Selector selector						= null;
		ServerSocketChannel serverSocketChannel	= null;

		try {

            selector = Selector.open();

            serverSocketChannel = ServerSocketChannel.open();
            serverSocketChannel.configureBlocking(false);
            serverSocketChannel.socket().bind(new InetSocketAddress(IP, PORT));
            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);


			// main loop
			while (true) {
				// wait for something to happen

                selector.select();

				// iterate over the events
				for (Iterator<SelectionKey> it = selector.selectedKeys().iterator(); it.hasNext(); ) {
					// get current event and REMOVE it from the list!!!
					SelectionKey key = it.next();
					it.remove();

					if (key.isAcceptable())
                        accept(key);
					else if (key.isReadable())
						read(key);
					else if (key.isWritable())
						write(key);
				}
			}

		} catch (IOException e) {
			e.printStackTrace();

		} finally {
			// cleanup
			if (selector != null)
				try {
					selector.close();
				} catch (IOException e) {}

			if (serverSocketChannel != null)
				try {
					serverSocketChannel.close();
				} catch (IOException e) {}
		}
        return null;
	}

}
package models;


import javax.swing.*;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.*;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Server extends SwingWorker<Object, Object >{

	public static int BUF_SIZE	= 1400; // buffer size
	public static String IP	;	// server IP
	public static int PORT;		// server port
    static ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());


    public Server(String IP, int PORT) {

        this.IP = IP;
        this.PORT = PORT;

    }

	public static void accept(SelectionKey key) throws IOException {

		System.out.print("ACCEPT: ");

        ByteBuffer buf = ByteBuffer.allocateDirect(BUF_SIZE);
        ServerSocketChannel serverSocketChannel = (ServerSocketChannel)key.channel();   // initialize from key

        SocketChannel socketChannel = serverSocketChannel.accept();				        // initialize from accept

        socketChannel.configureBlocking(false);
        socketChannel.register(key.selector(), SelectionKey.OP_READ);


        // display remote client address
		System.out.println("Connection from: " + socketChannel.socket().geten();

            serverSocketChannel = ServerSocketChannel.open();
            serverSocketChannel.configureBlocking(false);
            serverSocketChannel.socket().bind(new InetSocketAddress(IP, PORT));
            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);


			// main loop
			while (true) {
				// wait for something to happen

                selector.select();

				// iterate over the events
				for (Iterator<SelectionKey> it = selector.selectedKeys().iterator(); it.hasNext(); ) {
					// get current event and REMOVE it from the list!!!
					SelectionKey key = it.next();
					it.remove();

					if (key.isAcceptable())
                        accept(key);
					else if (key.isReadable())
						read(key);
					else if (key.isWritable())
						write(key);
				}
			}

		} catch (IOException e) {
			e.printStackTrace();

		} finally {
			// cleanup
			if (selector != null)
				try {
					selector.close();
				} catch (IOException e) {}

			if (serverSocketChannel != null)
				try {
					serverSocketChannel.close();
				} catch (IOException e) {}
		}
        return null;
	}

}
package models;


import javax.swing.*;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.*;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.concurrent.Execuannel.register(key.selector(), SelectionKey.OP_WRITE, buff);


    }

	public static void write(SelectionKey key) throws IOException {

        System.out.print("WRITE SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        String filename = "";


        ByteBuffer buf = (ByteBuffer) key.attachment();

        buf.flip();
        String encoding = System.getProperty("file.encoding");
        filename = Charset.forName(encoding).decode(buf).toString();

        RandomAccessFile fromFile = new RandomAccessFile(filename, "rw");
        FileChannel fc = fromFile.getChannel();
        buf = ByteBuffer.allocateDirect(BUF_SIZE);

        while (fc.read(buf) >= 0 || buf.position() > 0) {
            buf.flip();
            socketChannel.write(buf);
            buf.clear();
        }

        fc.close();
        fromFile.close();
        socketChannel.close();


	}

	public Object doInBackground() {

		Selector selector						= null;
		ServerSocketChannel serverSocketChannel	= null;

		try {

            selector = Selector.open();

            serverSocketChannel = ServerSocketChannel.open();
            serverSocketChannel.configureBlocking(false);
            serverSocketChannel.socket().bind(new InetSocketAddress(IP, PORT));
            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);


			// main loop
			while (true) {
				// wait for lableProcessors());


    public Server(String IP, int PORT) {

        this.IP = IP;
        this.PORT = PORT;

    }

	public static void accept(SelectionKey key) throws IOException {

		System.out.print("ACCEPT: ");

        ByteBuffer buf = ByteBuffer.allocateDirect(BUF_SIZE);
        ServerSocketChannel serverSocketChannel = (ServerSocketChannel)key.channel();   // initialize from key

        SocketChannel socketChannel = serverSocketChannel.accept();				        // initialize from accept

        socketChannel.configureBlocking(false);
        socketChannel.register(key.selector(), SelectionKey.OP_READ);


        // display remote client address
		System.out.println("Connection from: " + socketChannel.socket().getRemoteSocketAddress());
	}

	public static void read(SelectionKey key) throws IOException {

		System.out.print("READ SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        ByteBuffer buff = ByteBuffer.allocateDirect(BUF_SIZE);

        while(socketChannel.read(buff) > 0){

        }

        socketChannel.register(key.selector(), SelectionKey.OP_WRITE, buff);


    }

	public static void write(SelectionKey key) throws IOException {

        System.out.print("WRITE SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        String filename = "";


        ByteBuffer buf = (ByteBuffer) key.attachment();        accept(key);
					else if (key.isReadable())
						read(key);
					else if (key.isWritable())
						write(key);
				}
			}

		} catch (IOException e) {
			e.printStackTrace();

		} finally {
			// cleanup
			if (selector != null)
				try {
					selector.close();
				} catch (IOException e) {}

			if (serverSocketChannel != null)
				try {
					serverSocketChannel.close();
				} catch (IOException e) {}
		}
        return null;
	}

}
package models;


import javax.swing.*;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.*;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Server extends SwingWorker<Object, Object >{

	public static int BUF_SIZE	= 1400; // buffer size
	public static String IP	;	// server IP
	public static int PORT;		// server port
    static ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());


    public Server(String IP, int PORT) {

        this.IP = IP;
        this.PORT = PORT;

    }

	public static void accept(SelectionKey key) throws IOException {

		System.out.print("ACCEPT: ");

        ByteBuffer buf = ByteBuffer.allocateDirect(BUF_SIZE);
        ServerSocketChannel serverSocketChannel = (Se  while (fc.read(buf) >= 0 || buf.position() > 0) {
            buf.flip();
            socketChannel.write(buf);
            buf.clear();
        }

        fc.close();
        fromFile.close();
        socketChannel.close();


	}

	public Object doInBackground() {

		Selector selector						= null;
		ServerSocketChannel serverSocketChannel	= null;

		try {

            selector = Selector.open();

            serverSocketChannel = ServerSocketChannel.open();
            serverSocketChannel.configureBlocking(false);
            serverSocketChannel.socket().bind(new InetSocketAddress(IP, PORT));
            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);


			// main loop
			while (true) {
				// wait for something to happen

                selector.select();

				// iterate over the events
				for (Iterator<SelectionKey> it = selector.selectedKeys().iterator(); it.hasNext(); ) {
					// get current event and REMOVE it from the list!!!
					SelectionKey key = it.next();
					it.remove();

					if (key.isAcceptable())
                        accept(key);
					else if (key.isReadable())
						read(key);
					else if (key.isWritable())
						write(key);
				}
			}

		} catch (IOException e) {
			e.printStackTrace();

		} finally {
			// cleanup
			if (selector != null)
				try {
					selector.close();
				} catch (IOException e) {}

			if (serverSocketChannel != nuout.println("Connection from: " + socketChannel.socket().getRemoteSocketAddress());
	}

	public static void read(SelectionKey key) throws IOException {

		System.out.print("READ SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        ByteBuffer buff = ByteBuffer.allocateDirect(BUF_SIZE);

        while(socketChannel.read(buff) > 0){

        }

        socketChannel.register(key.selector(), SelectionKey.OP_WRITE, buff);


    }

	public static void write(SelectionKey key) throws IOException {

        System.out.print("WRITE SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        String filename = "";


        ByteBuffer buf = (ByteBuffer) key.attachment();

        buf.flip();
        String encoding = System.getProperty("file.encoding");
        filename = Charset.forName(encoding).decode(buf).toString();

        RandomAccessFile fromFile = new RandomAccessFile(filename, "rw");
        FileChannel fc = fromFile.getChannel();
        buf = ByteBuffer.allocateDirect(BUF_SIZE);

        while (fc.read(buf) >= 0 || buf.position() > 0) {
            buf.flip();
            socketChannel.write(buf);
            buf.clear();
        }

        fc.close();
        fromFile.close();
        socketChannel.close();


	}

	public Object doInBackground() {

		Selector selector						= null;
		ServerSocketChannel serverSocketimport java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Server extends SwingWorker<Object, Object >{

	public static int BUF_SIZE	= 1400; // buffer size
	public static String IP	;	// server IP
	public static int PORT;		// server port
    static ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());


    public Server(String IP, int PORT) {

        this.IP = IP;
        this.PORT = PORT;

    }

	public static void accept(SelectionKey key) throws IOException {

		System.out.print("ACCEPT: ");

        ByteBuffer buf = ByteBuffer.allocateDirect(BUF_SIZE);
        ServerSocketChannel serverSocketChannel = (ServerSocketChannel)key.channel();   // initialize from key

        SocketChannel socketChannel = serverSocketChannel.accept();				        // initialize from accept

        socketChannel.configureBlocking(false);
        socketChannel.register(key.selector(), SelectionKey.OP_READ);


        // display remote client address
		System.out.println("Connection from: " + socketChannel.socket().getRemoteSocketAddress());
	}

	public static void read(SelectionKey key) throws IOException {

		System.out.print("READ SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        ByteBuffer buff = ByteBuffer.allocateDirect(BUF_SIZE);

        whileCCEPT);


			// main loop
			while (true) {
				// wait for something to happen

                selector.select();

				// iterate over the events
				for (Iterator<SelectionKey> it = selector.selectedKeys().iterator(); it.hasNext(); ) {
					// get current event and REMOVE it from the list!!!
					SelectionKey key = it.next();
					it.remove();

					if (key.isAcceptable())
                        accept(key);
					else if (key.isReadable())
						read(key);
					else if (key.isWritable())
						write(key);
				}
			}

		} catch (IOException e) {
			e.printStackTrace();

		} finally {
			// cleanup
			if (selector != null)
				try {
					selector.close();
				} catch (IOException e) {}

			if (serverSocketChannel != null)
				try {
					serverSocketChannel.close();
				} catch (IOException e) {}
		}
        return null;
	}

}
package models;


import javax.swing.*;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.*;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Server extends SwingWorker<Object, Object >{

	public static int BUF_SIZE	= 1400; // buffer size
	public static String IP	;	// server IP
	public static int PORT;		// server port
    static ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());


    public Server(String IP, int PORT) {

        this.IP = IP;
        this.PORT = PORT;

    }

	public static void accept(SelectionKey key) throws IOException {

		System.out.print("ACCEPT: ");

        ByteBuffer buf = ByteBuffer.allocateDirect(BUF_SIZE);
        ServerSocketChannel serverSocketChannel = (ServerSocketChannel)key.channel();   // initialize from key

        SocketChannel socketChannel = serverSocketChannel.accept();				        // initialize from accept

        socketChannel.configureBlocking(false);
        socketChannel.register(key.selector(), SelectionKey.OP_READ);


        // display remote client address
		System.out.println("Connection from: " + socketChannel.socket().getRemoteSocketAddress());
	}

	public static void read(SelectionKey key) throws IOException {

		System.out.print("READ SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        ByteBuffer buff = ByteBuffer.allocateDirect(BUF_SIZE);

        while(socketChannel.read(buff) > 0){

        }

        socketChannel.register(key.selector(), SelectionKey.OP_WRITE, buff);


    }

	public static void write(SelectionKey key) throws IOException {

        System.out.print("WRITE SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        String filename = "";


        ByteBuffer buf = (ByteBuffer) key.attachment();

        buf.flip();
        String encoding = System.getProperty("file.encoding");
        filename = Charset.forName(encoding).decode(buf).toString();

        RandomAccessFile fromFile = new RandomAccessFile(filename, "rw");
        FileChannel fc = fromFile.getChannel();
        buf = ByteBuffer.allocateDirect(BUF_SIZE);

        while (fc.read(buf) >= 0 || buf.position() > 0) {
            buf.flip();
            socketChannel.write(buf);
            buf.clear();
        }

        fc.close();
        fromFile.close();
        socketChannel.close();


	}

	public Object doInBackground() {

		Selector selector						= null;
		ServerSocketChannel serverSocketChannel	= null;

		try {

            selector = Selector.open();

            serverSocketChannel = ServerSocketChannel.open();
            serverSocketChannel.configureBlocking(false);
            serverSocketChannel.socket().bind(new InetSocketAddress(IP, PORT));
            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);


			// main loop
			while (true) {
				// wait for something to happen

                selector.select();

				// iterate over the events
				for (Iterator<SelectionKey> it = selector.selectedKeys().iterator(); it.hasNext(); ) {
					// get current event and REMOVE it from the list!!!
					SelectionKey key = it.next();
				en();

            serverSocketChannel = ServerSocketChannel.open();
            serverSocketChannel.configureBlocking(false);
            serverSocketChannel.socket().bind(new InetSocketAddress(IP, PORT));
            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);


			// main loop
			while (true) {
				// wait for something to happen

                selector.select();

				// iterate over the events
				for (Iterator<SelectionKey> it = selector.selectedKeys().iterator(); it.hasNext(); ) {
					// get current event and REMOVE it from the list!!!
					SelectionKey key = it.next();
					it.remove();

					if (key.isAcceptable())
                        accept(key);
					else if (key.isReadable())
						read(key);
					else if (key.isWritable())
						write(key);
				}
			}

		} catch (IOException e) {
			e.printStackTrace();

		} finally {
			// cleanup
			if (selector != null)
				try {
					selector.close();
				} catch (IOException e) {}

			if (serverSocketChannel != null)
				try {
					serverSocketChannel.close();
				} catch (IOException e) {}
		}
        return null;
	}

}
package models;


import javax.swing.*;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.*;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Server extends SwingWorker<Object, Object >{

	public static int BUF_SIZE	= 1400; // buffer size
	public static String IP	;	// server IP
	public static int PORT;		// server port
    static ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());


    public Server(String IP, int PORT) {

        this.IP = IP;
        this.PORT = PORT;

    }

	public static void accept(SelectionKey key) throws IOException {

		System.out.print("ACCEPT: ");

        ByteBuffer buf = ByteBuffer.allocateDirect(BUF_SIZE);
        ServerSocketChannel serverSocketChannel = (ServerSocketChannel)key.channel();   // initialize from key

        SocketChannel socketChannel = serverSocketChannel.accept();				        // initialize from accept

        socketChannel.configureBlocking(false);
        socketChannel.register(key.selector(), SelectionKey.OP_READ);


        // display remote client address
		System.out.println("Connection from: " + socketChannel.socket().getRemoteSocketAddress());
	}

	public static void read(SelectionKey key) throws IOException {

		System.out.print("READ SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        ByteBuffer buff = ByteBuffer.allocateDirect(BUF_SIZE);

        while(socketChannel.read(buff) > 0){

        }

        socketChannel.register(key.selector(), SelectionKey.OP_WRITE, buff);


    }

	public static void write(SelectionKey key) throws IOException {

        System.out.print("WRITE SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        String filename = "";


        ByteBuffer buf = (ByteBuffer) key.attachment();

        buf.flip();
        String encoding = System.getProperty("file.encoding");
        filename = Charset.forName(encoding).decode(buf).toString();

        RandomAccessFile fromFile = new RandomAccessFile(filename, "rw");
        FileChannel fc = fromFile.getChannel();
        buf = ByteBuffer.allocateDirect(BUF_SIZE);

        while (fc.read(buf) >= 0 || buf.position() > 0) {
            buf.flip();
            socketChannel.write(buf);
            buf.clear();
        }

        fc.close();
        fromFile.close();
        socketChannel.close();


	}

	public Object doInBackground() {

		Selector selector						= null;
		ServerSocketChannel serverSocketChannel	= null;

		try {

            selector = Selector.open();

            serverSocketChannel = ServerSocketChannel.open();
            serverSocketChannel.configureBlocking(false);
            serverSocketChannel.socket().bind(new InetSocketAddress(IP, PORT));
            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);


			// main loop
			while (true) {
				// wait for something to happen

                selector.select();

				// iterate over the events
				for (Iterator<SelectionKey> it = selector.selectedKeys().iterator(); it.hasNext(); ) {
					// get current event and REMOVE it from the list!!!
					SelectionKey key = it.next();
					it.remove();

					if (key.isAcceptable())
                        accept(key);
					else if (key.isReadable())
						read(key);
					else if (key.isWritable())
						write(key);
				}
			}

		} catch (IOException e) {
			e.printStackTrace();

		} finally {
			// cleanup
			if (selector != null)
				try {
					selector.close();
				} catch (IOException e) {}

			if (serverSocketChannel != null)
				try {
					serverSocketChannel.close();
				} catch (IOException e) {}
		}
        return null;
	}

}
package models;


import javax.swing.*;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.*;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Server extends SwingWorker<Object, Object >{

	public static int BUF_SIZE	= 1400; // buffer size
	public static String IP	;	// server IP
	public static int PORT;		// server port
    static ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());


    public Server(String IP, int PORT) {

        this.IP = IP;
        this.PORT = PORT;

    }

	public static void accept(SelectionKey key) throws IOException {

		System.out.print("ACCEPT: ");

        ByteBuffer buf = ByteBuffer.allocateDirect(BUF_SIZE);
        ServerSocketChannel serverSocketChannel = (ServerSocketChannel)key.channel();   // initialize from key

        SocketChannel socketChannel = serverSocketChannel.accept();				        // initialize from accept

        socketChannel.configureBlocking(false);
        socketChannel.register(key.selector(), SelectionKey.OP_READ);


        // display remote client address
		System.out.println("Connection from: " + socketChannel.socket().getRemoteSocketAddress());
	}

	public static void read(SelectionKey key) throws IOException {

		System.out.print("READ SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        ByteBuffer buff = ByteBuffer.allocateDirect(BUF_SIZE);

        while(socketChannel.read(buff) > 0){

        }

        socketChannel.register(key.selector(), SelectionKey.OP_WRITE, buff);


    }

	public static void write(SelectionKey key) throws IOException {

        System.out.print("WRITE SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        String filename = "";


        ByteBuffer buf = (ByteBuffer) key.attachment();

        buf.flip();
        String encoding = System.getProperty("file.encoding");
        filename = Charset.forName(encoding).decode(buf).toString();

        RandomAccessFile fromFile = new RandomAccessFile(filename, "rw");
        FileChannel fc = fromFile.getChannel();
        buf = ByteBuffer.allocateDirect(BUF_SIZE);

        while (fc.read(buf) >= 0 || buf.position() > 0) {
            buf.flip();
            socketChannel.write(buf);
            buf.clear();
        }

        fc.close();
        fromFile.close();
        socketChannel.close();


	}

	public Object doInBackground() {

		Selector selector						= null;
		ServerSocketChannel serverSocketChannel	= null;

		try {

            selector = Selector.open();

            serverSocketChannel = ServerSocketChannel.open();
            serverSocketChannel.configureBlocking(false);
            serverSocketChannel.socket().bind(new InetSocketAddress(IP, PORT));
            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);


			// main loop
			while (true) {
				// wait for something to happen

                selector.select();

				// iterate over the events
				for (Iterator<SelectionKey> it = selector.selectedKeys().iterator(); it.hasNext(); ) {
					// get current event and REMOVE it from the list!!!
					SelectionKey key = it.next();
					it.remove();

					if (key.isAcceptable())
                        accept(key);
					else if (key.isReadable())
						read(key);
					else if (key.isWritable())
						write(key);
				}
			}

		} catch (IOException e) {
			e.printStackTrace();

		} finally {
			// cleanup
			if (selector != null)
				try {
					selector.close();
				} catch (IOException e) {}

			if (serverSocketChannel != null)
				try {
					serverSocketChannel.close();
				} catch (IOException e) {}
		}
        return null;
	}

}
package models;


import javax.swing.*;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.*;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Server extends SwingWorker<Object, Object >{

	public static int BUF_SIZE	= 1400; // buffer size
	public static String IP	;	// server IP
	public static int PORT;		// server port
    static ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());


    public Server(String IP, int PORT) {

        this.IP = IP;
        this.PORT = PORT;

    }

	public static void accept(SelectionKey key) throws IOException {

		System.out.print("ACCEPT: ");

        ByteBuffer buf = ByteBuffer.allocateDirect(BUF_SIZE);
        ServerSocketChannel serverSocketChannel = (ServerSocketChannel)key.channel();   // initialize from key

        SocketChannel socketChannel = serverSocketChannel.accept();				        // initialize from accept

        socketChannel.configureBlocking(false);
        socketChannel.register(key.selector(), SelectionKey.OP_READ);


        // display remote client address
		System.out.println("Connection from: " + socketChannel.socket().getRemoteSocketAddress());
	}

	public static void read(SelectionKey key) throws IOException {

		System.out.print("READ SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        ByteBuffer buff = ByteBuffer.allocateDirect(BUF_SIZE);

        while(socketChannel.read(buff) > 0){

        }

        socketChannel.register(key.selector(), SelectionKey.OP_WRITE, buff);


    }

	public static void write(SelectionKey key) throws IOException {

        System.out.print("WRITE SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        String filename = "";


        ByteBuffer buf = (ByteBuffer) key.attachment();

        buf.flip();
        String encoding = System.getProperty("file.encoding");
        filename = Charset.forName(encoding).decode(buf).toString();

        RandomAccessFile fromFile = new RandomAccessFile(filename, "rw");
        FileChannel fc = fromFile.getChannel();
        buf = ByteBuffer.allocateDirect(BUF_SIZE);

        while (fc.read(buf) >= 0 || buf.position() > 0) {
            buf.flip();
            socketChannel.write(buf);
            buf.clear();
        }

        fc.close();
        fromFile.close();
        socketChannel.close();


	}

	public Object doInBackground() {

		Selector selector						= null;
		ServerSocketChannel serverSocketChannel	= null;

		try {

            selector = Selector.open();

            serverSocketChannel = ServerSocketChannel.open();
            serverSocketChannel.configureBlocking(false);
            serverSocketChannel.socket().bind(new InetSocketAddress(IP, PORT));
            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);


			// main loop
			while (true) {
				// wait for something to happen

                selector.select();

				// iterate over the events
				for (Iterator<SelectionKey> it = selector.selectedKeys().iterator(); it.hasNext(); ) {
					// get current event and REMOVE it from the list!!!
					SelectionKey key = it.next();
					it.remove();

					if (key.isAcceptable())
                        accept(key);
					else if (key.isReadable())
						read(key);
					else if (key.isWritable())
						write(key);
				}
			}

		} catch (IOException e) {
			e.printStackTrace();

		} finally {
			// cleanup
			if (selector != null)
				try {
					selector.close();
				} catch (IOException e) {}

			if (serverSocketChannel != null)
				try {
					serverSocketChannel.close();
				} catch (IOException e) {}
		}
        return null;
	}

}
package models;


import javax.swing.*;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.*;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Server extends SwingWorker<Object, Object >{

	public static int BUF_SIZE	= 1400; // buffer size
	public static String IP	;	// server IP
	public static int PORT;		// server port
    static ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());


    public Server(String IP, int PORT) {

        this.IP = IP;
        this.PORT = PORT;

    }

	public static void accept(SelectionKey key) throws IOException {

		System.out.print("ACCEPT: ");

        ByteBuffer buf = ByteBuffer.allocateDirect(BUF_SIZE);
        ServerSocketChannel serverSocketChannel = (ServerSocketChannel)key.channel();   // initialize from key

        SocketChannel socketChannel = serverSocketChannel.accept();				        // initialize from accept

        socketChannel.configureBlocking(false);
        socketChannel.register(key.selector(), SelectionKey.OP_READ);


        // display remote client address
		System.out.println("Connection from: " + socketChannel.socket().getRemoteSocketAddress());
	}

	public static void read(SelectionKey key) throws IOException {

		System.out.print("READ SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        ByteBuffer buff = ByteBuffer.allocateDirect(BUF_SIZE);

        while(socketChannel.read(buff) > 0){

        }

        socketChannel.register(key.selector(), SelectionKey.OP_WRITE, buff);


    }

	public static void write(SelectionKey key) throws IOException {

        System.out.print("WRITE SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        String filename = "";


        ByteBuffer buf = (ByteBuffer) key.attachment();

        buf.flip();
        String encoding = System.getProperty("file.encoding");
        filename = Charset.forName(encoding).decode(buf).toString();

        RandomAccessFile fromFile = new RandomAccessFile(filename, "rw");
        FileChannel fc = fromFile.getChannel();
        buf = ByteBuffer.allocateDirect(BUF_SIZE);

        while (fc.read(buf) >= 0 || buf.position() > 0) {
            buf.flip();
            socketChannel.write(buf);
            buf.clear();
        }

        fc.close();
        fromFile.close();
        socketChannel.close();


	}

	public Object doInBackground() {

		Selector selector						= null;
		ServerSocketChannel serverSocketChannel	= null;

		try {

            selector = Selector.open();

            serverSocketChannel = ServerSocketChannel.open();
            serverSocketChannel.configureBlocking(false);
            serverSocketChannel.socket().bind(new InetSocketAddress(IP, PORT));
            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);


			// main loop
			while (true) {
				// wait for something to happen

                selector.select();

				// iterate over the events
				for (Iterator<SelectionKey> it = selector.selectedKeys().iterator(); it.hasNext(); ) {
					// get current event and REMOVE it from the list!!!
					SelectionKey key = it.next();
					it.remove();

					if (key.isAcceptable())
                        accept(key);
					else if (key.isReadable())
						read(key);
					else if (key.isWritable())
						write(key);
				}
			}

		} catch (IOException e) {
			e.printStackTrace();

		} finally {
			// cleanup
			if (selector != null)
				try {
					selector.close();
				} catch (IOException e) {}

			if (serverSocketChannel != null)
				try {
					serverSocketChannel.close();
				} catch (IOException e) {}
		}
        return null;
	}

}
package models;


import javax.swing.*;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.*;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Server extends SwingWorker<Object, Object >{

	public static int BUF_SIZE	= 1400; // buffer size
	public static String IP	;	// server IP
	public static int PORT;		// server port
    static ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());


    public Server(String IP, int PORT) {

        this.IP = IP;
        this.PORT = PORT;

    }

	public static void accept(SelectionKey key) throws IOException {

		System.out.print("ACCEPT: ");

        ByteBuffer buf = ByteBuffer.allocateDirect(BUF_SIZE);
        ServerSocketChannel serverSocketChannel = (ServerSocketChannel)key.channel();   // initialize from key

        SocketChannel socketChannel = serverSocketChannel.accept();				        // initialize from accept

        socketChannel.configureBlocking(false);
        socketChannel.register(key.selector(), SelectionKey.OP_READ);


        // display remote client address
		System.out.println("Connection from: " + socketChannel.socket().getRemoteSocketAddress());
	}

	public static void read(SelectionKey key) throws IOException {

		System.out.print("READ SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        ByteBuffer buff = ByteBuffer.allocateDirect(BUF_SIZE);

        while(socketChannel.read(buff) > 0){

        }

        socketChannel.register(key.selector(), SelectionKey.OP_WRITE, buff);


    }

	public static void write(SelectionKey key) throws IOException {

        System.out.print("WRITE SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        String filename = "";


        ByteBuffer buf = (ByteBuffer) key.attachment();

        buf.flip();
        String encoding = System.getProperty("file.encoding");
        filename = Charset.forName(encoding).decode(buf).toString();

        RandomAccessFile fromFile = new RandomAccessFile(filename, "rw");
        FileChannel fc = fromFile.getChannel();
        buf = ByteBuffer.allocateDirect(BUF_SIZE);

        while (fc.read(buf) >= 0 || buf.position() > 0) {
            buf.flip();
            socketChannel.write(buf);
            buf.clear();
        }

        fc.close();
        fromFile.close();
        socketChannel.close();


	}

	public Object doInBackground() {

		Selector selector						= null;
		ServerSocketChannel serverSocketChannel	= null;

		try {

            selector = Selector.open();

            serverSocketChannel = ServerSocketChannel.open();
            serverSocketChannel.configureBlocking(false);
            serverSocketChannel.socket().bind(new InetSocketAddress(IP, PORT));
            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);


			// main loop
			while (true) {
				// wait for something to happen

                selector.select();

				// iterate over the events
				for (Iterator<SelectionKey> it = selector.selectedKeys().iterator(); it.hasNext(); ) {
					// get current event and REMOVE it from the list!!!
					SelectionKey key = it.next();
					it.remove();

					if (key.isAcceptable())
                        accept(key);
					else if (key.isReadable())
						read(key);
					else if (key.isWritable())
						write(key);
				}
			}

		} catch (IOException e) {
			e.printStackTrace();

		} finally {
			// cleanup
			if (selector != null)
				try {
					selector.close();
				} catch (IOException e) {}

			if (serverSocketChannel != null)
				try {
					serverSocketChannel.close();
				} catch (IOException e) {}
		}
        return null;
	}

}
package models;


import javax.swing.*;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.*;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Server extends SwingWorker<Object, Object >{

	public static int BUF_SIZE	= 1400; // buffer size
	public static String IP	;	// server IP
	public static int PORT;		// server port
    static ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());


    public Server(String IP, int PORT) {

        this.IP = IP;
        this.PORT = PORT;

    }

	public static void accept(SelectionKey key) throws IOException {

		System.out.print("ACCEPT: ");

        ByteBuffer buf = ByteBuffer.allocateDirect(BUF_SIZE);
        ServerSocketChannel serverSocketChannel = (ServerSocketChannel)key.channel();   // initialize from key

        SocketChannel socketChannel = serverSocketChannel.accept();				        // initialize from accept

        socketChannel.configureBlocking(false);
        socketChannel.register(key.selector(), SelectionKey.OP_READ);


        // display remote client address
		System.out.println("Connection from: " + socketChannel.socket().getRemoteSocketAddress());
	}

	public static void read(SelectionKey key) throws IOException {

		System.out.print("READ SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        ByteBuffer buff = ByteBuffer.allocateDirect(BUF_SIZE);

        while(socketChannel.read(buff) > 0){

        }

        socketChannel.register(key.selector(), SelectionKey.OP_WRITE, buff);


    }

	public static void write(SelectionKey key) throws IOException {

        System.out.print("WRITE SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        String filename = "";


        ByteBuffer buf = (ByteBuffer) key.attachment();

        buf.flip();
        String encoding = System.getProperty("file.encoding");
        filename = Charset.forName(encoding).decode(buf).toString();

        RandomAccessFile fromFile = new RandomAccessFile(filename, "rw");
        FileChannel fc = fromFile.getChannel();
        buf = ByteBuffer.allocateDirect(BUF_SIZE);

        while (fc.read(buf) >= 0 || buf.position() > 0) {
            buf.flip();
            socketChannel.write(buf);
            buf.clear();
        }

        fc.close();
        fromFile.close();
        socketChannel.close();


	}

	public Object doInBackground() {

		Selector selector						= null;
		ServerSocketChannel serverSocketChannel	= null;

		try {

            selector = Selector.open();

            serverSocketChannel = ServerSocketChannel.open();
            serverSocketChannel.configureBlocking(false);
            serverSocketChannel.socket().bind(new InetSocketAddress(IP, PORT));
            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);


			// main loop
			while (true) {
				// wait for something to happen

                selector.select();

				// iterate over the events
				for (Iterator<SelectionKey> it = selector.selectedKeys().iterator(); it.hasNext(); ) {
					// get current event and REMOVE it from the list!!!
					SelectionKey key = it.next();
					it.remove();

					if (key.isAcceptable())
                        accept(key);
					else if (key.isReadable())
						read(key);
					else if (key.isWritable())
						write(key);
				}
			}

		} catch (IOException e) {
			e.printStackTrace();

		} finally {
			// cleanup
			if (selector != null)
				try {
					selector.close();
				} catch (IOException e) {}

			if (serverSocketChannel != null)
				try {
					serverSocketChannel.close();
				} catch (IOException e) {}
		}
        return null;
	}

}
package models;


import javax.swing.*;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.*;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Server extends SwingWorker<Object, Object >{

	public static int BUF_SIZE	= 1400; // buffer size
	public static String IP	;	// server IP
	public static int PORT;		// server port
    static ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());


    public Server(String IP, int PORT) {

        this.IP = IP;
        this.PORT = PORT;

    }

	public static void accept(SelectionKey key) throws IOException {

		System.out.print("ACCEPT: ");

        ByteBuffer buf = ByteBuffer.allocateDirect(BUF_SIZE);
        ServerSocketChannel serverSocketChannel = (ServerSocketChannel)key.channel();   // initialize from key

        SocketChannel socketChannel = serverSocketChannel.accept();				        // initialize from accept

        socketChannel.configureBlocking(false);
        socketChannel.register(key.selector(), SelectionKey.OP_READ);


        // display remote client address
		System.out.println("Connection from: " + socketChannel.socket().getRemoteSocketAddress());
	}

	public static void read(SelectionKey key) throws IOException {

		System.out.print("READ SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        ByteBuffer buff = ByteBuffer.allocateDirect(BUF_SIZE);

        while(socketChannel.read(buff) > 0){

        }

        socketChannel.register(key.selector(), SelectionKey.OP_WRITE, buff);


    }

	public static void write(SelectionKey key) throws IOException {

        System.out.print("WRITE SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        String filename = "";


        ByteBuffer buf = (ByteBuffer) key.attachment();

        buf.flip();
        String encoding = System.getProperty("file.encoding");
        filename = Charset.forName(encoding).decode(buf).toString();

        RandomAccessFile fromFile = new RandomAccessFile(filename, "rw");
        FileChannel fc = fromFile.getChannel();
        buf = ByteBuffer.allocateDirect(BUF_SIZE);

        while (fc.read(buf) >= 0 || buf.position() > 0) {
            buf.flip();
            socketChannel.write(buf);
            buf.clear();
        }

        fc.close();
        fromFile.close();
        socketChannel.close();


	}

	public Object doInBackground() {

		Selector selector						= null;
		ServerSocketChannel serverSocketChannel	= null;

		try {

            selector = Selector.open();

            serverSocketChannel = ServerSocketChannel.open();
            serverSocketChannel.configureBlocking(false);
            serverSocketChannel.socket().bind(new InetSocketAddress(IP, PORT));
            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);


			// main loop
			while (true) {
				// wait for something to happen

                selector.select();

				// iterate over the events
				for (Iterator<SelectionKey> it = selector.selectedKeys().iterator(); it.hasNext(); ) {
					// get current event and REMOVE it from the list!!!
					SelectionKey key = it.next();
					it.remove();

					if (key.isAcceptable())
                        accept(key);
					else if (key.isReadable())
						read(key);
					else if (key.isWritable())
						write(key);
				}
			}

		} catch (IOException e) {
			e.printStackTrace();

		} finally {
			// cleanup
			if (selector != null)
				try {
					selector.close();
				} catch (IOException e) {}

			if (serverSocketChannel != null)
				try {
					serverSocketChannel.close();
				} catch (IOException e) {}
		}
        return null;
	}

}
package models;


import javax.swing.*;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.*;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Server extends SwingWorker<Object, Object >{

	public static int BUF_SIZE	= 1400; // buffer size
	public static String IP	;	// server IP
	public static int PORT;		// server port
    static ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());


    public Server(String IP, int PORT) {

        this.IP = IP;
        this.PORT = PORT;

    }

	public static void accept(SelectionKey key) throws IOException {

		System.out.print("ACCEPT: ");

        ByteBuffer buf = ByteBuffer.allocateDirect(BUF_SIZE);
        ServerSocketChannel serverSocketChannel = (ServerSocketChannel)key.channel();   // initialize from key

        SocketChannel socketChannel = serverSocketChannel.accept();				        // initialize from accept

        socketChannel.configureBlocking(false);
        socketChannel.register(key.selector(), SelectionKey.OP_READ);


        // display remote client address
		System.out.println("Connection from: " + socketChannel.socket().getRemoteSocketAddress());
	}

	public static void read(SelectionKey key) throws IOException {

		System.out.print("READ SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        ByteBuffer buff = ByteBuffer.allocateDirect(BUF_SIZE);

        while(socketChannel.read(buff) > 0){

        }

        socketChannel.register(key.selector(), SelectionKey.OP_WRITE, buff);


    }

	public static void write(SelectionKey key) throws IOException {

        System.out.print("WRITE SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        String filename = "";


        ByteBuffer buf = (ByteBuffer) key.attachment();

        buf.flip();
        String encoding = System.getProperty("file.encoding");
        filename = Charset.forName(encoding).decode(buf).toString();

        RandomAccessFile fromFile = new RandomAccessFile(filename, "rw");
        FileChannel fc = fromFile.getChannel();
        buf = ByteBuffer.allocateDirect(BUF_SIZE);

        while (fc.read(buf) >= 0 || buf.position() > 0) {
            buf.flip();
            socketChannel.write(buf);
            buf.clear();
        }

        fc.close();
        fromFile.close();
        socketChannel.close();


	}

	public Object doInBackground() {

		Selector selector						= null;
		ServerSocketChannel serverSocketChannel	= null;

		try {

            selector = Selector.open();

            serverSocketChannel = ServerSocketChannel.open();
            serverSocketChannel.configureBlocking(false);
            serverSocketChannel.socket().bind(new InetSocketAddress(IP, PORT));
            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);


			// main loop
			while (true) {
				// wait for something to happen

                selector.select();

				// iterate over the events
				for (Iterator<SelectionKey> it = selector.selectedKeys().iterator(); it.hasNext(); ) {
					// get current event and REMOVE it from the list!!!
					SelectionKey key = it.next();
					it.remove();

					if (key.isAcceptable())
                        accept(key);
					else if (key.isReadable())
						read(key);
					else if (key.isWritable())
						write(key);
				}
			}

		} catch (IOException e) {
			e.printStackTrace();

		} finally {
			// cleanup
			if (selector != null)
				try {
					selector.close();
				} catch (IOException e) {}

			if (serverSocketChannel != null)
				try {
					serverSocketChannel.close();
				} catch (IOException e) {}
		}
        return null;
	}

}
package models;


import javax.swing.*;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.*;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Server extends SwingWorker<Object, Object >{

	public static int BUF_SIZE	= 1400; // buffer size
	public static String IP	;	// server IP
	public static int PORT;		// server port
    static ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());


    public Server(String IP, int PORT) {

        this.IP = IP;
        this.PORT = PORT;

    }

	public static void accept(SelectionKey key) throws IOException {

		System.out.print("ACCEPT: ");

        ByteBuffer buf = ByteBuffer.allocateDirect(BUF_SIZE);
        ServerSocketChannel serverSocketChannel = (ServerSocketChannel)key.channel();   // initialize from key

        SocketChannel socketChannel = serverSocketChannel.accept();				        // initialize from accept

        socketChannel.configureBlocking(false);
        socketChannel.register(key.selector(), SelectionKey.OP_READ);


        // display remote client address
		System.out.println("Connection from: " + socketChannel.socket().getRemoteSocketAddress());
	}

	public static void read(SelectionKey key) throws IOException {

		System.out.print("READ SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        ByteBuffer buff = ByteBuffer.allocateDirect(BUF_SIZE);

        while(socketChannel.read(buff) > 0){

        }

        socketChannel.register(key.selector(), SelectionKey.OP_WRITE, buff);


    }

	public static void write(SelectionKey key) throws IOException {

        System.out.print("WRITE SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        String filename = "";


        ByteBuffer buf = (ByteBuffer) key.attachment();

        buf.flip();
        String encoding = System.getProperty("file.encoding");
        filename = Charset.forName(encoding).decode(buf).toString();

        RandomAccessFile fromFile = new RandomAccessFile(filename, "rw");
        FileChannel fc = fromFile.getChannel();
        buf = ByteBuffer.allocateDirect(BUF_SIZE);

        while (fc.read(buf) >= 0 || buf.position() > 0) {
            buf.flip();
            socketChannel.write(buf);
            buf.clear();
        }

        fc.close();
        fromFile.close();
        socketChannel.close();


	}

	public Object doInBackground() {

		Selector selector						= null;
		ServerSocketChannel serverSocketChannel	= null;

		try {

            selector = Selector.open();

            serverSocketChannel = ServerSocketChannel.open();
            serverSocketChannel.configureBlocking(false);
            serverSocketChannel.socket().bind(new InetSocketAddress(IP, PORT));
            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);


			// main loop
			while (true) {
				// wait for something to happen

                selector.select();

				// iterate over the events
				for (Iterator<SelectionKey> it = selector.selectedKeys().iterator(); it.hasNext(); ) {
					// get current event and REMOVE it from the list!!!
					SelectionKey key = it.next();
					it.remove();

					if (key.isAcceptable())
                        accept(key);
					else if (key.isReadable())
						read(key);
					else if (key.isWritable())
						write(key);
				}
			}

		} catch (IOException e) {
			e.printStackTrace();

		} finally {
			// cleanup
			if (selector != null)
				try {
					selector.close();
				} catch (IOException e) {}

			if (serverSocketChannel != null)
				try {
					serverSocketChannel.close();
				} catch (IOException e) {}
		}
        return null;
	}

}
package models;


import javax.swing.*;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.*;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Server extends SwingWorker<Object, Object >{

	public static int BUF_SIZE	= 1400; // buffer size
	public static String IP	;	// server IP
	public static int PORT;		// server port
    static ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());


    public Server(String IP, int PORT) {

        this.IP = IP;
        this.PORT = PORT;

    }

	public static void accept(SelectionKey key) throws IOException {

		System.out.print("ACCEPT: ");

        ByteBuffer buf = ByteBuffer.allocateDirect(BUF_SIZE);
        ServerSocketChannel serverSocketChannel = (ServerSocketChannel)key.channel();   // initialize from key

        SocketChannel socketChannel = serverSocketChannel.accept();				        // initialize from accept

        socketChannel.configureBlocking(false);
        socketChannel.register(key.selector(), SelectionKey.OP_READ);


        // display remote client address
		System.out.println("Connection from: " + socketChannel.socket().getRemoteSocketAddress());
	}

	public static void read(SelectionKey key) throws IOException {

		System.out.print("READ SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        ByteBuffer buff = ByteBuffer.allocateDirect(BUF_SIZE);

        while(socketChannel.read(buff) > 0){

        }

        socketChannel.register(key.selector(), SelectionKey.OP_WRITE, buff);


    }

	public static void write(SelectionKey key) throws IOException {

        System.out.print("WRITE SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        String filename = "";


        ByteBuffer buf = (ByteBuffer) key.attachment();

        buf.flip();
        String encoding = System.getProperty("file.encoding");
        filename = Charset.forName(encoding).decode(buf).toString();

        RandomAccessFile fromFile = new RandomAccessFile(filename, "rw");
        FileChannel fc = fromFile.getChannel();
        buf = ByteBuffer.allocateDirect(BUF_SIZE);

        while (fc.read(buf) >= 0 || buf.position() > 0) {
            buf.flip();
            socketChannel.write(buf);
            buf.clear();
        }

        fc.close();
        fromFile.close();
        socketChannel.close();


	}

	public Object doInBackground() {

		Selector selector						= null;
		ServerSocketChannel serverSocketChannel	= null;

		try {

            selector = Selector.open();

            serverSocketChannel = ServerSocketChannel.open();
            serverSocketChannel.configureBlocking(false);
            serverSocketChannel.socket().bind(new InetSocketAddress(IP, PORT));
            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);


			// main loop
			while (true) {
				// wait for something to happen

                selector.select();

				// iterate over the events
				for (Iterator<SelectionKey> it = selector.selectedKeys().iterator(); it.hasNext(); ) {
					// get current event and REMOVE it from the list!!!
					SelectionKey key = it.next();
					it.remove();

					if (key.isAcceptable())
                        accept(key);
					else if (key.isReadable())
						read(key);
					else if (key.isWritable())
						write(key);
				}
			}

		} catch (IOException e) {
			e.printStackTrace();

		} finally {
			// cleanup
			if (selector != null)
				try {
					selector.close();
				} catch (IOException e) {}

			if (serverSocketChannel != null)
				try {
					serverSocketChannel.close();
				} catch (IOException e) {}
		}
        return null;
	}

}
package models;


import javax.swing.*;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.*;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Server extends SwingWorker<Object, Object >{

	public static int BUF_SIZE	= 1400; // buffer size
	public static String IP	;	// server IP
	public static int PORT;		// server port
    static ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());


    public Server(String IP, int PORT) {

        this.IP = IP;
        this.PORT = PORT;

    }

	public static void accept(SelectionKey key) throws IOException {

		System.out.print("ACCEPT: ");

        ByteBuffer buf = ByteBuffer.allocateDirect(BUF_SIZE);
        ServerSocketChannel serverSocketChannel = (ServerSocketChannel)key.channel();   // initialize from key

        SocketChannel socketChannel = serverSocketChannel.accept();				        // initialize from accept

        socketChannel.configureBlocking(false);
        socketChannel.register(key.selector(), SelectionKey.OP_READ);


        // display remote client address
		System.out.println("Connection from: " + socketChannel.socket().getRemoteSocketAddress());
	}

	public static void read(SelectionKey key) throws IOException {

		System.out.print("READ SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        ByteBuffer buff = ByteBuffer.allocateDirect(BUF_SIZE);

        while(socketChannel.read(buff) > 0){

        }

        socketChannel.register(key.selector(), SelectionKey.OP_WRITE, buff);


    }

	public static void write(SelectionKey key) throws IOException {

        System.out.print("WRITE SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        String filename = "";


        ByteBuffer buf = (ByteBuffer) key.attachment();

        buf.flip();
        String encoding = System.getProperty("file.encoding");
        filename = Charset.forName(encoding).decode(buf).toString();

        RandomAccessFile fromFile = new RandomAccessFile(filename, "rw");
        FileChannel fc = fromFile.getChannel();
        buf = ByteBuffer.allocateDirect(BUF_SIZE);

        while (fc.read(buf) >= 0 || buf.position() > 0) {
            buf.flip();
            socketChannel.write(buf);
            buf.clear();
        }

        fc.close();
        fromFile.close();
        socketChannel.close();


	}

	public Object doInBackground() {

		Selector selector						= null;
		ServerSocketChannel serverSocketChannel	= null;

		try {

            selector = Selector.open();

            serverSocketChannel = ServerSocketChannel.open();
            serverSocketChannel.configureBlocking(false);
            serverSocketChannel.socket().bind(new InetSocketAddress(IP, PORT));
            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);


			// main loop
			while (true) {
				// wait for something to happen

                selector.select();

				// iterate over the events
				for (Iterator<SelectionKey> it = selector.selectedKeys().iterator(); it.hasNext(); ) {
					// get current event and REMOVE it from the list!!!
					SelectionKey key = it.next();
					it.remove();

					if (key.isAcceptable())
                        accept(key);
					else if (key.isReadable())
						read(key);
					else if (key.isWritable())
						write(key);
				}
			}

		} catch (IOException e) {
			e.printStackTrace();

		} finally {
			// cleanup
			if (selector != null)
				try {
					selector.close();
				} catch (IOException e) {}

			if (serverSocketChannel != null)
				try {
					serverSocketChannel.close();
				} catch (IOException e) {}
		}
        return null;
	}

}
package models;


import javax.swing.*;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.*;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Server extends SwingWorker<Object, Object >{

	public static int BUF_SIZE	= 1400; // buffer size
	public static String IP	;	// server IP
	public static int PORT;		// server port
    static ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());


    public Server(String IP, int PORT) {

        this.IP = IP;
        this.PORT = PORT;

    }

	public static void accept(SelectionKey key) throws IOException {

		System.out.print("ACCEPT: ");

        ByteBuffer buf = ByteBuffer.allocateDirect(BUF_SIZE);
        ServerSocketChannel serverSocketChannel = (ServerSocketChannel)key.channel();   // initialize from key

        SocketChannel socketChannel = serverSocketChannel.accept();				        // initialize from accept

        socketChannel.configureBlocking(false);
        socketChannel.register(key.selector(), SelectionKey.OP_READ);


        // display remote client address
		System.out.println("Connection from: " + socketChannel.socket().getRemoteSocketAddress());
	}

	public static void read(SelectionKey key) throws IOException {

		System.out.print("READ SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        ByteBuffer buff = ByteBuffer.allocateDirect(BUF_SIZE);

        while(socketChannel.read(buff) > 0){

        }

        socketChannel.register(key.selector(), SelectionKey.OP_WRITE, buff);


    }

	public static void write(SelectionKey key) throws IOException {

        System.out.print("WRITE SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        String filename = "";


        ByteBuffer buf = (ByteBuffer) key.attachment();

        buf.flip();
        String encoding = System.getProperty("file.encoding");
        filename = Charset.forName(encoding).decode(buf).toString();

        RandomAccessFile fromFile = new RandomAccessFile(filename, "rw");
        FileChannel fc = fromFile.getChannel();
        buf = ByteBuffer.allocateDirect(BUF_SIZE);

        while (fc.read(buf) >= 0 || buf.position() > 0) {
            buf.flip();
            socketChannel.write(buf);
            buf.clear();
        }

        fc.close();
        fromFile.close();
        socketChannel.close();


	}

	public Object doInBackground() {

		Selector selector						= null;
		ServerSocketChannel serverSocketChannel	= null;

		try {

            selector = Selector.open();

            serverSocketChannel = ServerSocketChannel.open();
            serverSocketChannel.configureBlocking(false);
            serverSocketChannel.socket().bind(new InetSocketAddress(IP, PORT));
            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);


			// main loop
			while (true) {
				// wait for something to happen

                selector.select();

				// iterate over the events
				for (Iterator<SelectionKey> it = selector.selectedKeys().iterator(); it.hasNext(); ) {
					// get current event and REMOVE it from the list!!!
					SelectionKey key = it.next();
					it.remove();

					if (key.isAcceptable())
                        accept(key);
					else if (key.isReadable())
						read(key);
					else if (key.isWritable())
						write(key);
				}
			}

		} catch (IOException e) {
			e.printStackTrace();

		} finally {
			// cleanup
			if (selector != null)
				try {
					selector.close();
				} catch (IOException e) {}

			if (serverSocketChannel != null)
				try {
					serverSocketChannel.close();
				} catch (IOException e) {}
		}
        return null;
	}

}
package models;


import javax.swing.*;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.*;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Server extends SwingWorker<Object, Object >{

	public static int BUF_SIZE	= 1400; // buffer size
	public static String IP	;	// server IP
	public static int PORT;		// server port
    static ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());


    public Server(String IP, int PORT) {

        this.IP = IP;
        this.PORT = PORT;

    }

	public static void accept(SelectionKey key) throws IOException {

		System.out.print("ACCEPT: ");

        ByteBuffer buf = ByteBuffer.allocateDirect(BUF_SIZE);
        ServerSocketChannel serverSocketChannel = (ServerSocketChannel)key.channel();   // initialize from key

        SocketChannel socketChannel = serverSocketChannel.accept();				        // initialize from accept

        socketChannel.configureBlocking(false);
        socketChannel.register(key.selector(), SelectionKey.OP_READ);


        // display remote client address
		System.out.println("Connection from: " + socketChannel.socket().getRemoteSocketAddress());
	}

	public static void read(SelectionKey key) throws IOException {

		System.out.print("READ SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        ByteBuffer buff = ByteBuffer.allocateDirect(BUF_SIZE);

        while(socketChannel.read(buff) > 0){

        }

        socketChannel.register(key.selector(), SelectionKey.OP_WRITE, buff);


    }

	public static void write(SelectionKey key) throws IOException {

        System.out.print("WRITE SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        String filename = "";


        ByteBuffer buf = (ByteBuffer) key.attachment();

        buf.flip();
        String encoding = System.getProperty("file.encoding");
        filename = Charset.forName(encoding).decode(buf).toString();

        RandomAccessFile fromFile = new RandomAccessFile(filename, "rw");
        FileChannel fc = fromFile.getChannel();
        buf = ByteBuffer.allocateDirect(BUF_SIZE);

        while (fc.read(buf) >= 0 || buf.position() > 0) {
            buf.flip();
            socketChannel.write(buf);
            buf.clear();
        }

        fc.close();
        fromFile.close();
        socketChannel.close();


	}

	public Object doInBackground() {

		Selector selector						= null;
		ServerSocketChannel serverSocketChannel	= null;

		try {

            selector = Selector.open();

            serverSocketChannel = ServerSocketChannel.open();
            serverSocketChannel.configureBlocking(false);
            serverSocketChannel.socket().bind(new InetSocketAddress(IP, PORT));
            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);


			// main loop
			while (true) {
				// wait for something to happen

                selector.select();

				// iterate over the events
				for (Iterator<SelectionKey> it = selector.selectedKeys().iterator(); it.hasNext(); ) {
					// get current event and REMOVE it from the list!!!
					SelectionKey key = it.next();
					it.remove();

					if (key.isAcceptable())
                        accept(key);
					else if (key.isReadable())
						read(key);
					else if (key.isWritable())
						write(key);
				}
			}

		} catch (IOException e) {
			e.printStackTrace();

		} finally {
			// cleanup
			if (selector != null)
				try {
					selector.close();
				} catch (IOException e) {}

			if (serverSocketChannel != null)
				try {
					serverSocketChannel.close();
				} catch (IOException e) {}
		}
        return null;
	}

}
package models;


import javax.swing.*;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.*;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Server extends SwingWorker<Object, Object >{

	public static int BUF_SIZE	= 1400; // buffer size
	public static String IP	;	// server IP
	public static int PORT;		// server port
    static ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());


    public Server(String IP, int PORT) {

        this.IP = IP;
        this.PORT = PORT;

    }

	public static void accept(SelectionKey key) throws IOException {

		System.out.print("ACCEPT: ");

        ByteBuffer buf = ByteBuffer.allocateDirect(BUF_SIZE);
        ServerSocketChannel serverSocketChannel = (ServerSocketChannel)key.channel();   // initialize from key

        SocketChannel socketChannel = serverSocketChannel.accept();				        // initialize from accept

        socketChannel.configureBlocking(false);
        socketChannel.register(key.selector(), SelectionKey.OP_READ);


        // display remote client address
		System.out.println("Connection from: " + socketChannel.socket().getRemoteSocketAddress());
	}

	public static void read(SelectionKey key) throws IOException {

		System.out.print("READ SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        ByteBuffer buff = ByteBuffer.allocateDirect(BUF_SIZE);

        while(socketChannel.read(buff) > 0){

        }

        socketChannel.register(key.selector(), SelectionKey.OP_WRITE, buff);


    }

	public static void write(SelectionKey key) throws IOException {

        System.out.print("WRITE SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        String filename = "";


        ByteBuffer buf = (ByteBuffer) key.attachment();

        buf.flip();
        String encoding = System.getProperty("file.encoding");
        filename = Charset.forName(encoding).decode(buf).toString();

        RandomAccessFile fromFile = new RandomAccessFile(filename, "rw");
        FileChannel fc = fromFile.getChannel();
        buf = ByteBuffer.allocateDirect(BUF_SIZE);

        while (fc.read(buf) >= 0 || buf.position() > 0) {
            buf.flip();
            socketChannel.write(buf);
            buf.clear();
        }

        fc.close();
        fromFile.close();
        socketChannel.close();


	}

	public Object doInBackground() {

		Selector selector						= null;
		ServerSocketChannel serverSocketChannel	= null;

		try {

            selector = Selector.open();

            serverSocketChannel = ServerSocketChannel.open();
            serverSocketChannel.configureBlocking(false);
            serverSocketChannel.socket().bind(new InetSocketAddress(IP, PORT));
            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);


			// main loop
			while (true) {
				// wait for something to happen

                selector.select();

				// iterate over the events
				for (Iterator<SelectionKey> it = selector.selectedKeys().iterator(); it.hasNext(); ) {
					// get current event and REMOVE it from the list!!!
					SelectionKey key = it.next();
					it.remove();

					if (key.isAcceptable())
                        accept(key);
					else if (key.isReadable())
						read(key);
					else if (key.isWritable())
						write(key);
				}
			}

		} catch (IOException e) {
			e.printStackTrace();

		} finally {
			// cleanup
			if (selector != null)
				try {
					selector.close();
				} catch (IOException e) {}

			if (serverSocketChannel != null)
				try {
					serverSocketChannel.close();
				} catch (IOException e) {}
		}
        return null;
	}

}
package models;


import javax.swing.*;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.*;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Server extends SwingWorker<Object, Object >{

	public static int BUF_SIZE	= 1400; // buffer size
	public static String IP	;	// server IP
	public static int PORT;		// server port
    static ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());


    public Server(String IP, int PORT) {

        this.IP = IP;
        this.PORT = PORT;

    }

	public static void accept(SelectionKey key) throws IOException {

		System.out.print("ACCEPT: ");

        ByteBuffer buf = ByteBuffer.allocateDirect(BUF_SIZE);
        ServerSocketChannel serverSocketChannel = (ServerSocketChannel)key.channel();   // initialize from key

        SocketChannel socketChannel = serverSocketChannel.accept();				        // initialize from accept

        socketChannel.configureBlocking(false);
        socketChannel.register(key.selector(), SelectionKey.OP_READ);


        // display remote client address
		System.out.println("Connection from: " + socketChannel.socket().getRemoteSocketAddress());
	}

	public static void read(SelectionKey key) throws IOException {

		System.out.print("READ SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        ByteBuffer buff = ByteBuffer.allocateDirect(BUF_SIZE);

        while(socketChannel.read(buff) > 0){

        }

        socketChannel.register(key.selector(), SelectionKey.OP_WRITE, buff);


    }

	public static void write(SelectionKey key) throws IOException {

        System.out.print("WRITE SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        String filename = "";


        ByteBuffer buf = (ByteBuffer) key.attachment();

        buf.flip();
        String encoding = System.getProperty("file.encoding");
        filename = Charset.forName(encoding).decode(buf).toString();

        RandomAccessFile fromFile = new RandomAccessFile(filename, "rw");
        FileChannel fc = fromFile.getChannel();
        buf = ByteBuffer.allocateDirect(BUF_SIZE);

        while (fc.read(buf) >= 0 || buf.position() > 0) {
            buf.flip();
            socketChannel.write(buf);
            buf.clear();
        }

        fc.close();
        fromFile.close();
        socketChannel.close();


	}

	public Object doInBackground() {

		Selector selector						= null;
		ServerSocketChannel serverSocketChannel	= null;

		try {

            selector = Selector.open();

            serverSocketChannel = ServerSocketChannel.open();
            serverSocketChannel.configureBlocking(false);
            serverSocketChannel.socket().bind(new InetSocketAddress(IP, PORT));
            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);


			// main loop
			while (true) {
				// wait for something to happen

                selector.select();

				// iterate over the events
				for (Iterator<SelectionKey> it = selector.selectedKeys().iterator(); it.hasNext(); ) {
					// get current event and REMOVE it from the list!!!
					SelectionKey key = it.next();
					it.remove();

					if (key.isAcceptable())
                        accept(key);
					else if (key.isReadable())
						read(key);
					else if (key.isWritable())
						write(key);
				}
			}

		} catch (IOException e) {
			e.printStackTrace();

		} finally {
			// cleanup
			if (selector != null)
				try {
					selector.close();
				} catch (IOException e) {}

			if (serverSocketChannel != null)
				try {
					serverSocketChannel.close();
				} catch (IOException e) {}
		}
        return null;
	}

}
package models;


import javax.swing.*;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.*;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Server extends SwingWorker<Object, Object >{

	public static int BUF_SIZE	= 1400; // buffer size
	public static String IP	;	// server IP
	public static int PORT;		// server port
    static ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());


    public Server(String IP, int PORT) {

        this.IP = IP;
        this.PORT = PORT;

    }

	public static void accept(SelectionKey key) throws IOException {

		System.out.print("ACCEPT: ");

        ByteBuffer buf = ByteBuffer.allocateDirect(BUF_SIZE);
        ServerSocketChannel serverSocketChannel = (ServerSocketChannel)key.channel();   // initialize from key

        SocketChannel socketChannel = serverSocketChannel.accept();				        // initialize from accept

        socketChannel.configureBlocking(false);
        socketChannel.register(key.selector(), SelectionKey.OP_READ);


        // display remote client address
		System.out.println("Connection from: " + socketChannel.socket().getRemoteSocketAddress());
	}

	public static void read(SelectionKey key) throws IOException {

		System.out.print("READ SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        ByteBuffer buff = ByteBuffer.allocateDirect(BUF_SIZE);

        while(socketChannel.read(buff) > 0){

        }

        socketChannel.register(key.selector(), SelectionKey.OP_WRITE, buff);


    }

	public static void write(SelectionKey key) throws IOException {

        System.out.print("WRITE SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        String filename = "";


        ByteBuffer buf = (ByteBuffer) key.attachment();

        buf.flip();
        String encoding = System.getProperty("file.encoding");
        filename = Charset.forName(encoding).decode(buf).toString();

        RandomAccessFile fromFile = new RandomAccessFile(filename, "rw");
        FileChannel fc = fromFile.getChannel();
        buf = ByteBuffer.allocateDirect(BUF_SIZE);

        while (fc.read(buf) >= 0 || buf.position() > 0) {
            buf.flip();
            socketChannel.write(buf);
            buf.clear();
        }

        fc.close();
        fromFile.close();
        socketChannel.close();


	}

	public Object doInBackground() {

		Selector selector						= null;
		ServerSocketChannel serverSocketChannel	= null;

		try {

            selector = Selector.open();

            serverSocketChannel = ServerSocketChannel.open();
            serverSocketChannel.configureBlocking(false);
            serverSocketChannel.socket().bind(new InetSocketAddress(IP, PORT));
            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);


			// main loop
			while (true) {
				// wait for something to happen

                selector.select();

				// iterate over the events
				for (Iterator<SelectionKey> it = selector.selectedKeys().iterator(); it.hasNext(); ) {
					// get current event and REMOVE it from the list!!!
					SelectionKey key = it.next();
					it.remove();

					if (key.isAcceptable())
                        accept(key);
					else if (key.isReadable())
						read(key);
					else if (key.isWritable())
						write(key);
				}
			}

		} catch (IOException e) {
			e.printStackTrace();

		} finally {
			// cleanup
			if (selector != null)
				try {
					selector.close();
				} catch (IOException e) {}

			if (serverSocketChannel != null)
				try {
					serverSocketChannel.close();
				} catch (IOException e) {}
		}
        return null;
	}

}
package models;


import javax.swing.*;
imporInBackground() {

		Selector selector						= null;
		ServerSocketChannel serverSocketChannel	= null;

		try {

            selector = Selector.open();

            serverSocketChannel = ServerSocketChannel.open();
            serverSocketChannel.configureBlocking(false);
            serverSocketChannel.socket().bind(new InetSocketAddress(IP, PORT));
            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);


			// main loop
			while (true) {
				// wait for something to happen

                selector.select();

				// iterate over the events
				for (Iterator<SelectionKey> it = selector.selectedKeys().iterator(); it.hasNext(); ) {
					// get current event and REMOVE it from the list!!!
					SelectionKey key = it.next();
					it.remove();

					if (key.isAcceptable())
                        accept(key);
					else if (key.isReadable())
						read(key);
					else if (key.isWritable())
						write(key);
				}
			}

		} catch (IOException e) {
			e.printStackTrace();

		} finally {
			// cleanup
			if (selector != null)
				try {
					selector.close();
				} catch (IOException e) {}

			if (serverSocketChannel != null)
				try {
					serverSocketChannel.close();
				} catch (IOException e) {}
		}
        return null;
	}

}
package models;


import javax.swing.*;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.*;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Server extends SwingWorker<Object, Object >{

	public static int BUF_SIZE	= 1400; // buffer size
	public static String IP	;	// server IP
	public static int PORT;		// server port
    static ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());


    public Server(String IP, int PORT) {

        this.IP = IP;
        this.PORT = PORT;

    }

	public static void accept(SelectionKey key) throws IOException {

		System.out.print("ACCEPT: ");

        ByteBuffer buf = ByteBuffer.allocateDirect(BUF_SIZE);
        ServerSocketChannel serverSocketChannel = (ServerSocketChannel)key.channel();   // initialize from key

        SocketChannel socketChannel = serverSocketChannel.accept();				        // initialize from accept

        socketChannel.configureBlocking(false);
        socketChannel.register(key.selector(), SelectionKey.OP_READ);


        // display remote client address
		System.out.println("Connection from: " + socketChannel.socket().getRemoteSocketAddress());
	}

	public static void read(SelectionKey key) throws IOException {

		System.out.print("READ SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        ByteBuffer buff = ByteBuffer.allocateDirect(BUF_SIZE);

        while(socketChannel.read(buff) > 0){

        }

        socketChannel.register(key.selector(), SelectionKey.OP_WRITE, buff);


    }

	public static void write(SelectionKey key) throws IOException {

        System.out.print("WRITE SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        String filename = "";


        ByteBuffer buf = (ByteBuffer) key.attachment();

        buf.flip();
        String encoding = System.getProperty("file.encoding");
        filename = Charset.forName(encoding).decode(buf).toString();

        RandomAccessFile fromFile = new RandomAccessFile(filename, "rw");
        FileChannel fc = fromFile.getChannel();
        buf = ByteBuffer.allocateDirect(BUF_SIZE);

        while (fc.read(buf) >= 0 || buf.position() > 0) {
            buf.flip();
            socketChannel.write(buf);
            buf.clear();
        }

        fc.close();
        fromFile.close();
        socketChannel.close();


	}

	public Object doInBackground() {

		Selector selector						= null;
		ServerSocketChannel serverSocketChannel	= null;

		try {

            selector = Selector.open();

            serverSocketChannel = ServerSocketChannel.open();
            serverSocketChannel.configureBlocking(false);
            serverSocketChannel.socket().bind(new InetSocketAddress(IP, PORT));
            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);


			// main loop
			while (true) {
				// wait for something to happen

                selector.select();

				// iterate over the events
				for (Iterator<SelectionKey> it = selector.selectedKeys().iterator(); it.hasNext(); ) {
					// get current event and REMOVE it from the list!!!
					SelectionKey key = it.next();
					it.remove();

					if (key.isAcceptable())
                        accept(key);
					else if (key.isReadable())
						read(key);
					else if (key.isWritable())
						write(key);
				}
			}

		} catch (IOException e) {
			e.printStackTrace();

		} finally {
			// cleanup
			if (selector != null)
				try {
					selector.close();
				} catch (IOException e) {}

			if (serverSocketChannel != null)
				try {
					serverSocketChannel.close();
				} catch (IOException e) {}
		}
        return null;
	}

}
package models;


import javax.swing.*;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.*;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Server extends SwingWorker<Object, Object >{

	public static int BUF_SIZE	= 1400; // buffer size
	public static String IP	;	// server IP
	public static int PORT;		// server port
    static ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());


    public Server(String IP, int PORT) {

        this.IP = IP;
        this.PORT = PORT;

    }

	public static void accept(SelectionKey key) throws IOException {

		System.out.print("ACCEPT: ");

        ByteBuffer buf = ByteBuffer.allocateDirect(BUF_SIZE);
        ServerSocketChannel serverSocketChannel = (ServerSocketChannel)key.channel();   // initialize from key

        SocketChannel socketChannel = serverSocketChannel.accept();				        // initialize from accept

        socketChannel.configureBlocking(false);
        socketChannel.register(key.selector(), SelectionKey.OP_READ);


        // display remote client address
		System.out.println("Connection from: " + socketChannel.socket().getRemoteSocketAddress());
	}

	public static void read(SelectionKey key) throws IOException {

		System.out.print("READ SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        ByteBuffer buff = ByteBuffer.allocateDirect(BUF_SIZE);

        while(socketChannel.read(buff) > 0){

        }

        socketChannel.register(key.selector(), SelectionKey.OP_WRITE, buff);


    }

	public static void write(SelectionKey key) throws IOException {

        System.out.print("WRITE SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        String filename = "";


        ByteBuffer buf = (ByteBuffer) key.attachment();

        buf.flip();
        String encoding = System.getProperty("file.encoding");
        filename = Charset.forName(encoding).decode(buf).toString();

        RandomAccessFile fromFile = new RandomAccessFile(filename, "rw");
        FileChannel fc = fromFile.getChannel();
        buf = ByteBuffer.allocateDirect(BUF_SIZE);

        while (fc.read(buf) >= 0 || buf.position() > 0) {
            buf.flip();
            socketChannel.write(buf);
            buf.clear();
        }

        fc.close();
        fromFile.close();
        socketChannel.close();


	}

	public Object doInBackground() {

		Selector selector						= null;
		ServerSocketChannel serverSocketChannel	= null;

		try {

            selector = Selector.open();

            serverSocketChannel = ServerSocketChannel.open();
            serverSocketChannel.configureBlocking(false);
            serverSocketChannel.socket().bind(new InetSocketAddress(IP, PORT));
            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);


			// main loop
			while (true) {
				// wait for something to happen

                selector.select();

				// iterate over the events
				for (Iterator<SelectionKey> it = selector.selectedKeys().iterator(); it.hasNext(); ) {
					// get current event and REMOVE it from the list!!!
					SelectionKey key = it.next();
					it.remove();

					if (key.isAcceptable())
                        accept(key);
					else if (key.isReadable())
						read(key);
					else if (key.isWritable())
						write(key);
				}
			}

		} catch (IOException e) {
			e.printStackTrace();

		} finally {
			// cleanup
			if (selector != null)
				try {
					selector.close();
				} catch (IOException e) {}

			if (serverSocketChannel != null)
				try {
					serverSocketChannel.close();
				} catch (IOException e) {}
		}
        return null;
	}

}
package models;


import javax.swing.*;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.*;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Server extends SwingWorker<Object, Object >{

	public static int BUF_SIZE	= 1400; // buffer size
	public static String IP	;	// server IP
	public static int PORT;		// server port
    static ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());


    public Server(String IP, int PORT) {

        this.IP = IP;
        this.PORT = PORT;

    }

	public static void accept(SelectionKey key) throws IOException {

		System.out.print("ACCEPT: ");

        ByteBuffer buf = ByteBuffer.allocateDirect(BUF_SIZE);
        ServerSocketChannel serverSocketChannel = (ServerSocketChannel)key.channel();   // initialize from key

        SocketChannel socketChannel = serverSocketChannel.accept();				        // initialize from accept

        socketChannel.configureBlocking(false);
        socketChannel.register(key.selector(), SelectionKey.OP_READ);


        // display remote client address
		System.out.println("Connection from: " + socketChannel.socket().getRemoteSocketAddress());
	}

	public static void read(SelectionKey key) throws IOException {

		System.out.print("READ SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        ByteBuffer buff = ByteBuffer.allocateDirect(BUF_SIZE);

        while(socketChannel.read(buff) > 0){

        }

        socketChannel.register(key.selector(), SelectionKey.OP_WRITE, buff);


    }

	public static void write(SelectionKey key) throws IOException {

        System.out.print("WRITE SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        String filename = "";


        ByteBuffer buf = (ByteBuffer) key.attachment();

        buf.flip();
        String encoding = System.getProperty("file.encoding");
        filename = Charset.forName(encoding).decode(buf).toString();

        RandomAccessFile fromFile = new RandomAccessFile(filename, "rw");
        FileChannel fc = fromFile.getChannel();
        buf = ByteBuffer.allocateDirect(BUF_SIZE);

        while (fc.read(buf) >= 0 || buf.position() > 0) {
            buf.flip();
            socketChannel.write(buf);
            buf.clear();
        }

        fc.close();
        fromFile.close();
        socketChannel.close();


	}

	public Object doInBackground() {

		Selector selector						= null;
		ServerSocketChannel serverSocketChannel	= null;

		try {

            selector = Selector.open();

            serverSocketChannel = ServerSocketChannel.open();
            serverSocketChannel.configureBlocking(false);
            serverSocketChannel.socket().bind(new InetSocketAddress(IP, PORT));
            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);


			// main loop
			while (true) {
				// wait for something to happen

                selector.select();

				// iterate over the events
				for (Iterator<SelectionKey> it = selector.selectedKeys().iterator(); it.hasNext(); ) {
					// get current event and REMOVE it from the list!!!
					SelectionKey key = it.next();
					it.remove();

					if (key.isAcceptable())
                        accept(key);
					else if (key.isReadable())
						read(key);
					else if (key.isWritable())
						write(key);
				}
			}

		} catch (IOException e) {
			e.printStackTrace();

		} finally {
			// cleanup
			if (selector != null)
				try {
					selector.close();
				} catch (IOException e) {}

			if (serverSocketChannel != null)
				try {
					serverSocketChannel.close();
				} catch (IOException e) {}
		}
        return null;
	}

}
package models;


import javax.swing.*;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.*;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Server extends SwingWorker<Object, Object >{

	public static int BUF_SIZE	= 1400; // buffer size
	public static String IP	;	// server IP
	public static int PORT;		// server port
    static ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());


    public Server(String IP, int PORT) {

        this.IP = IP;
        this.PORT = PORT;

    }

	public static void accept(SelectionKey key) throws IOException {

		System.out.print("ACCEPT: ");

        ByteBuffer buf = ByteBuffer.allocateDirect(BUF_SIZE);
        ServerSocketChannel serverSocketChannel = (ServerSocketChannel)key.channel();   // initialize from key

        SocketChannel socketChannel = serverSocketChannel.accept();				        // initialize from accept

        socketChannel.configureBlocking(false);
        socketChannel.register(key.selector(), SelectionKey.OP_READ);


        // display remote client address
		System.out.println("Connection from: " + socketChannel.socket().getRemoteSocketAddress());
	}

	public static void read(SelectionKey key) throws IOException {

		System.out.print("READ SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        ByteBuffer buff = ByteBuffer.allocateDirect(BUF_SIZE);

        while(socketChannel.read(buff) > 0){

        }

        socketChannel.register(key.selector(), SelectionKey.OP_WRITE, buff);


    }

	public static void write(SelectionKey key) throws IOException {

        System.out.print("WRITE SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        String filename = "";


        ByteBuffer buf = (ByteBuffer) key.attachment();

        buf.flip();
        String encoding = System.getProperty("file.encoding");
        filename = Charset.forName(encoding).decode(buf).toString();

        RandomAccessFile fromFile = new RandomAccessFile(filename, "rw");
        FileChannel fc = fromFile.getChannel();
        buf = ByteBuffer.allocateDirect(BUF_SIZE);

        while (fc.read(buf) >= 0 || buf.position() > 0) {
            buf.flip();
            socketChannel.write(buf);
            buf.clear();
        }

        fc.close();
        fromFile.close();
        socketChannel.close();


	}

	public Object doInBackground() {

		Selector selector						= null;
		ServerSocketChannel serverSocketChannel	= null;

		try {

            selector = Selector.open();

            serverSocketChannel = ServerSocketChannel.open();
            serverSocketChannel.configureBlocking(false);
            serverSocketChannel.socket().bind(new InetSocketAddress(IP, PORT));
            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);


			// main loop
			while (true) {
				// wait for something to happen

                selector.select();

				// iterate over the events
				for (Iterator<SelectionKey> it = selector.selectedKeys().iterator(); it.hasNext(); ) {
					// get current event and REMOVE it from the list!!!
					SelectionKey key = it.next();
					it.remove();

					if (key.isAcceptable())
                        accept(key);
					else if (key.isReadable())
						read(key);
					else if (key.isWritable())
						write(key);
				}
			}

		} catch (IOException e) {
			e.printStackTrace();

		} finally {
			// cleanup
			if (selector != null)
				try {
					selector.close();
				} catch (IOException e) {}

			if (serverSocketChannel != null)
				try {
					serverSocketChannel.close();
				} catch (IOException e) {}
		}
        return null;
	}

}
package models;


import javax.swing.*;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.*;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Server extends SwingWorker<Object, Object >{

	public static int BUF_SIZE	= 1400; // buffer size
	public static String IP	;	// server IP
	public static int PORT;		// server port
    static ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());


    public Server(String IP, int PORT) {

        this.IP = IP;
        this.PORT = PORT;

    }

	public static void accept(SelectionKey key) throws IOException {

		System.out.print("ACCEPT: ");

        ByteBuffer buf = ByteBuffer.allocateDirect(BUF_SIZE);
        ServerSocketChannel serverSocketChannel = (ServerSocketChannel)key.channel();   // initialize from key

        SocketChannel socketChannel = serverSocketChannel.accept();				        // initialize from accept

        socketChannel.configureBlocking(false);
        socketChannel.register(key.selector(), SelectionKey.OP_READ);


        // display remote client address
		System.out.println("Connection from: " + socketChannel.socket().getRemoteSocketAddress());
	}

	public static void read(SelectionKey key) throws IOException {

		System.out.print("READ SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        ByteBuffer buff = ByteBuffer.allocateDirect(BUF_SIZE);

        while(socketChannel.read(buff) > 0){

        }

        socketChannel.register(key.selector(), SelectionKey.OP_WRITE, buff);


    }

	public static void write(SelectionKey key) throws IOException {

        System.out.print("WRITE SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        String filename = "";


        ByteBuffer buf = (ByteBuffer) key.attachment();

        buf.flip();
        String encoding = System.getProperty("file.encoding");
        filename = Charset.forName(encoding).decode(buf).toString();

        RandomAccessFile fromFile = new RandomAccessFile(filename, "rw");
        FileChannel fc = fromFile.getChannel();
        buf = ByteBuffer.allocateDirect(BUF_SIZE);

        while (fc.read(buf) >= 0 || buf.position() > 0) {
            buf.flip();
            socketChannel.write(buf);
            buf.clear();
        }

        fc.close();
        fromFile.close();
        socketChannel.close();


	}

	public Object doInBackground() {

		Selector selector						= null;
		ServerSocketChannel serverSocketChannel	= null;

		try {

            selector = Selector.open();

            serverSocketChannel = ServerSocketChannel.open();
            serverSocketChannel.configureBlocking(false);
            serverSocketChannel.socket().bind(new InetSocketAddress(IP, PORT));
            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);


			// main loop
			while (true) {
				// wait for something to happen

                selector.select();

				// iterate over the events
				for (Iterator<SelectionKey> it = selector.selectedKeys().iterator(); it.hasNext(); ) {
					// get current event and REMOVE it from the list!!!
					SelectionKey key = it.next();
					it.remove();

					if (key.isAcceptable())
                        accept(key);
					else if (key.isReadable())
						read(key);
					else if (key.isWritable())
						write(key);
				}
			}

		} catch (IOException e) {
			e.printStackTrace();

		} finally {
			// cleanup
			if (selector != null)
				try {
					selector.close();
				} catch (IOException e) {}

			if (serverSocketChannel != null)
				try {
					serverSocketChannel.close();
				} catch (IOException e) {}
		}
        return null;
	}

}
package models;


import javax.swing.*;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.*;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Server extends SwingWorker<Object, Object >{

	public static int BUF_SIZE	= 1400; // buffer size
	public static String IP	;	// server IP
	public static int PORT;		// server port
    static ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());


    public Server(String IP, int PORT) {

        this.IP = IP;
        this.PORT = PORT;

    }

	public static void accept(SelectionKey key) throws IOException {

		System.out.print("ACCEPT: ");

        ByteBuffer buf = ByteBuffer.allocateDirect(BUF_SIZE);
        ServerSocketChannel serverSocketChannel = (ServerSocketChannel)key.channel();   // initialize from key

        SocketChannel socketChannel = serverSocketChannel.accept();				        // initialize from accept

        socketChannel.configureBlocking(false);
        socketChannel.register(key.selector(), SelectionKey.OP_READ);


        // display remote client address
		System.out.println("Connection from: " + socketChannel.socket().getRemoteSocketAddress());
	}

	public static void read(SelectionKey key) throws IOException {

		System.out.print("READ SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        ByteBuffer buff = ByteBuffer.allocateDirect(BUF_SIZE);

        while(socketChannel.read(buff) > 0){

        }

        socketChannel.register(key.selector(), SelectionKey.OP_WRITE, buff);


    }

	public static void write(SelectionKey key) throws IOException {

        System.out.print("WRITE SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        String filename = "";


        ByteBuffer buf = (ByteBuffer) key.attachment();

        buf.flip();
        String encoding = System.getProperty("file.encoding");
        filename = Charset.forName(encoding).decode(buf).toString();

        RandomAccessFile fromFile = new RandomAccessFile(filename, "rw");
        FileChannel fc = fromFile.getChannel();
        buf = ByteBuffer.allocateDirect(BUF_SIZE);

        while (fc.read(buf) >= 0 || buf.position() > 0) {
            buf.flip();
            socketChannel.write(buf);
            buf.clear();
        }

        fc.close();
        fromFile.close();
        socketChannel.close();


	}

	public Object doInBackground() {

		Selector selector						= null;
		ServerSocketChannel serverSocketChannel	= null;

		try {

            selector = Selector.open();

            serverSocketChannel = ServerSocketChannel.open();
            serverSocketChannel.configureBlocking(false);
            serverSocketChannel.socket().bind(new InetSocketAddress(IP, PORT));
            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);


			// main loop
			while (true) {
				// wait for something to happen

                selector.select();

				// iterate over the events
				for (Iterator<SelectionKey> it = selector.selectedKeys().iterator(); it.hasNext(); ) {
					// get current event and REMOVE it from the list!!!
					SelectionKey key = it.next();
					it.remove();

					if (key.isAcceptable())
                        accept(key);
					else if (key.isReadable())
						read(key);
					else if (key.isWritable())
						write(key);
				}
			}

		} catch (IOException e) {
			e.printStackTrace();

		} finally {
			// cleanup
			if (selector != null)
				try {
					selector.close();
				} catch (IOException e) {}

			if (serverSocketChannel != null)
				try {
					serverSocketChannel.close();
				} catch (IOException e) {}
		}
        return null;
	}

}
package models;


import javax.swing.*;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.*;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Server extends SwingWorker<Object, Object >{

	public static int BUF_SIZE	= 1400; // buffer size
	public static String IP	;	// server IP
	public static int PORT;		// server port
    static ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());


    public Server(String IP, int PORT) {

        this.IP = IP;
        this.PORT = PORT;

    }

	public static void accept(SelectionKey key) throws IOException {

		System.out.print("ACCEPT: ");

        ByteBuffer buf = ByteBuffer.allocateDirect(BUF_SIZE);
        ServerSocketChannel serverSocketChannel = (ServerSocketChannel)key.channel();   // initialize from key

        SocketChannel socketChannel = serverSocketChannel.accept();				        // initialize from accept

        socketChannel.configureBlocking(false);
        socketChannel.register(key.selector(), SelectionKey.OP_READ);


        // display remote client address
		System.out.println("Connection from: " + socketChannel.socket().getRemoteSocketAddress());
	}

	public static void read(SelectionKey key) throws IOException {

		System.out.print("READ SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        ByteBuffer buff = ByteBuffer.allocateDirect(BUF_SIZE);

        while(socketChannel.read(buff) > 0){

        }

        socketChannel.register(key.selector(), SelectionKey.OP_WRITE, buff);


    }

	public static void write(SelectionKey key) throws IOException {

        System.out.print("WRITE SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        String filename = "";


        ByteBuffer buf = (ByteBuffer) key.attachment();

        buf.flip();
        String encoding = System.getProperty("file.encoding");
        filename = Charset.forName(encoding).decode(buf).toString();

        RandomAccessFile fromFile = new RandomAccessFile(filename, "rw");
        FileChannel fc = fromFile.getChannel();
        buf = ByteBuffer.allocateDirect(BUF_SIZE);

        while (fc.read(buf) >= 0 || buf.position() > 0) {
            buf.flip();
            socketChannel.write(buf);
            buf.clear();
        }

        fc.close();
        fromFile.close();
        socketChannel.close();


	}

	public Object doInBackground() {

		Selector selector						= null;
		ServerSocketChannel serverSocketChannel	= null;

		try {

            selector = Selector.open();

            serverSocketChannel = ServerSocketChannel.open();
            serverSocketChannel.configureBlocking(false);
            serverSocketChannel.socket().bind(new InetSocketAddress(IP, PORT));
            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);


			// main loop
			while (true) {
				// wait for something to happen

                selector.select();

				// iterate over the events
				for (Iterator<SelectionKey> it = selector.selectedKeys().iterator(); it.hasNext(); ) {
					// get current event and REMOVE it from the list!!!
					SelectionKey key = it.next();
					it.remove();

					if (key.isAcceptable())
                        accept(key);
					else if (key.isReadable())
						read(key);
					else if (key.isWritable())
						write(key);
				}
			}

		} catch (IOException e) {
			e.printStackTrace();

		} finally {
			// cleanup
			if (selector != null)
				try {
					selector.close();
				} catch (IOException e) {}

			if (serverSocketChannel != null)
				try {
					serverSocketChannel.close();
				} catch (IOException e) {}
		}
        return null;
	}

}
package models;


import javax.swing.*;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.*;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Server extends SwingWorker<Object, Object >{

	public static int BUF_SIZE	= 1400; // buffer size
	public static String IP	;	// server IP
	public static int PORT;		// server port
    static ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());


    public Server(String IP, int PORT) {

        this.IP = IP;
        this.PORT = PORT;

    }

	public static void accept(SelectionKey key) throws IOException {

		System.out.print("ACCEPT: ");

        ByteBuffer buf = ByteBuffer.allocateDirect(BUF_SIZE);
        ServerSocketChannel serverSocketChannel = (ServerSocketChannel)key.channel();   // initialize from key

        SocketChannel socketChannel = serverSocketChannel.accept();				        // initialize from accept

        socketChannel.configureBlocking(false);
        socketChannel.register(key.selector(), SelectionKey.OP_READ);


        // display remote client address
		System.out.println("Connection from: " + socketChannel.socket().getRemoteSocketAddress());
	}

	public static void read(SelectionKey key) throws IOException {

		System.out.print("READ SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        ByteBuffer buff = ByteBuffer.allocateDirect(BUF_SIZE);

        while(socketChannel.read(buff) > 0){

        }

        socketChannel.register(key.selector(), SelectionKey.OP_WRITE, buff);


    }

	public static void write(SelectionKey key) throws IOException {

        System.out.print("WRITE SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        String filename = "";


        ByteBuffer buf = (ByteBuffer) key.attachment();

        buf.flip();
        String encoding = System.getProperty("file.encoding");
        filename = Charset.forName(encoding).decode(buf).toString();

        RandomAccessFile fromFile = new RandomAccessFile(filename, "rw");
        FileChannel fc = fromFile.getChannel();
        buf = ByteBuffer.allocateDirect(BUF_SIZE);

        while (fc.read(buf) >= 0 || buf.position() > 0) {
            buf.flip();
            socketChannel.write(buf);
            buf.clear();
        }

        fc.close();
        fromFile.close();
        socketChannel.close();


	}

	public Object doInBackground() {

		Selector selector						= null;
		ServerSocketChannel serverSocketChannel	= null;

		try {

            selector = Selector.open();

            serverSocketChannel = ServerSocketChannel.open();
            serverSocketChannel.configureBlocking(false);
            serverSocketChannel.socket().bind(new InetSocketAddress(IP, PORT));
            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);


			// main loop
			while (true) {
				// wait for something to happen

                selector.select();

				// iterate over the events
				for (Iterator<SelectionKey> it = selector.selectedKeys().iterator(); it.hasNext(); ) {
					// get current event and REMOVE it from the list!!!
					SelectionKey key = it.next();
					it.remove();

					if (key.isAcceptable())
                        accept(key);
					else if (key.isReadable())
						read(key);
					else if (key.isWritable())
						write(key);
				}
			}

		} catch (IOException e) {
			e.printStackTrace();

		} finally {
			// cleanup
			if (selector != null)
				try {
					selector.close();
				} catch (IOException e) {}

			if (serverSocketChannel != null)
				try {
					serverSocketChannel.close();
				} catch (IOException e) {}
		}
        return null;
	}

}
package models;


import javax.swing.*;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.*;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Server extends SwingWorker<Object, Object >{

	public static int BUF_SIZE	= 1400; // buffer size
	public static String IP	;	// server IP
	public static int PORT;		// server port
    static ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());


    public Server(String IP, int PORT) {

        this.IP = IP;
        this.PORT = PORT;

    }

	public static void accept(SelectionKey key) throws IOException {

		System.out.print("ACCEPT: ");

        ByteBuffer buf = ByteBuffer.allocateDirect(BUF_SIZE);
        ServerSocketChannel serverSocketChannel = (ServerSocketChannel)key.channel();   // initialize from key

        SocketChannel socketChannel = serverSocketChannel.accept();				        // initialize from accept

        socketChannel.configureBlocking(false);
        socketChannel.register(key.selector(), SelectionKey.OP_READ);


        // display remote client address
		System.out.println("Connection from: " + socketChannel.socket().getRemoteSocketAddress());
	}

	public static void read(SelectionKey key) throws IOException {

		System.out.print("READ SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        ByteBuffer buff = ByteBuffer.allocateDirect(BUF_SIZE);

        while(socketChannel.read(buff) > 0){

        }

        socketChannel.register(key.selector(), SelectionKey.OP_WRITE, buff);


    }

	public static void write(SelectionKey key) throws IOException {

        System.out.print("WRITE SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        String filename = "";


        ByteBuffer buf = (ByteBuffer) key.attachment();

        buf.flip();
        String encoding = System.getProperty("file.encoding");
        filename = Charset.forName(encoding).decode(buf).toString();

        RandomAccessFile fromFile = new RandomAccessFile(filename, "rw");
        FileChannel fc = fromFile.getChannel();
        buf = ByteBuffer.allocateDirect(BUF_SIZE);

        while (fc.read(buf) >= 0 || buf.position() > 0) {
            buf.flip();
            socketChannel.write(buf);
            buf.clear();
        }

        fc.close();
        fromFile.close();
        socketChannel.close();


	}

	public Object doInBackground() {

		Selector selector						= null;
		ServerSocketChannel serverSocketChannel	= null;

		try {

            selector = Selector.open();

            serverSocketChannel = ServerSocketChannel.open();
            serverSocketChannel.configureBlocking(false);
            serverSocketChannel.socket().bind(new InetSocketAddress(IP, PORT));
            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);


			// main loop
			while (true) {
				// wait for something to happen

                selector.select();

				// iterate over the events
				for (Iterator<SelectionKey> it = selector.selectedKeys().iterator(); it.hasNext(); ) {
					// get current event and REMOVE it from the list!!!
					SelectionKey key = it.next();
					it.remove();

					if (key.isAcceptable())
                        accept(key);
					else if (key.isReadable())
						read(key);
					else if (key.isWritable())
						write(key);
				}
			}

		} catch (IOException e) {
			e.printStackTrace();

		} finally {
			// cleanup
			if (selector != null)
				try {
					selector.close();
				} catch (IOException e) {}

			if (serverSocketChannel != null)
				try {
					serverSocketChannel.close();
				} catch (IOException e) {}
		}
        return null;
	}

}
package models;


import javax.swing.*;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.*;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Server extends SwingWorker<Object, Object >{

	public static int BUF_SIZE	= 1400; // buffer size
	public static String IP	;	// server IP
	public static int PORT;		// server port
    static ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());


    public Server(String IP, int PORT) {

        this.IP = IP;
        this.PORT = PORT;

    }

	public static void accept(SelectionKey key) throws IOException {

		System.out.print("ACCEPT: ");

        ByteBuffer buf = ByteBuffer.allocateDirect(BUF_SIZE);
        ServerSocketChannel serverSocketChannel = (ServerSocketChannel)key.channel();   // initialize from key

        SocketChannel socketChannel = serverSocketChannel.accept();				        // initialize from accept

        socketChannel.configureBlocking(false);
        socketChannel.register(key.selector(), SelectionKey.OP_READ);


        // display remote client address
		System.out.println("Connection from: " + socketChannel.socket().getRemoteSocketAddress());
	}

	public static void read(SelectionKey key) throws IOException {

		System.out.print("READ SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        ByteBuffer buff = ByteBuffer.allocateDirect(BUF_SIZE);

        while(socketChannel.read(buff) > 0){

        }

        socketChannel.register(key.selector(), SelectionKey.OP_WRITE, buff);


    }

	public static void write(SelectionKey key) throws IOException {

        System.out.print("WRITE SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        String filename = "";


        ByteBuffer buf = (ByteBuffer) key.attachment();

        buf.flip();
        String encoding = System.getProperty("file.encoding");
        filename = Charset.forName(encoding).decode(buf).toString();

        RandomAccessFile fromFile = new RandomAccessFile(filename, "rw");
        FileChannel fc = fromFile.getChannel();
        buf = ByteBuffer.allocateDirect(BUF_SIZE);

        while (fc.read(buf) >= 0 || buf.position() > 0) {
            buf.flip();
            socketChannel.write(buf);
            buf.clear();
        }

        fc.close();
        fromFile.close();
        socketChannel.close();


	}

	public Object doInBackground() {

		Selector selector						= null;
		ServerSocketChannel serverSocketChannel	= null;

		try {

            selector = Selector.open();

            serverSocketChannel = ServerSocketChannel.open();
            serverSocketChannel.configureBlocking(false);
            serverSocketChannel.socket().bind(new InetSocketAddress(IP, PORT));
            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);


			// main loop
			while (true) {
				// wait for something to happen

                selector.select();

				// iterate over the events
				for (Iterator<SelectionKey> it = selector.selectedKeys().iterator(); it.hasNext(); ) {
					// get current event and REMOVE it from the list!!!
					SelectionKey key = it.next();
					it.remove();

					if (key.isAcceptable())
                        accept(key);
					else if (key.isReadable())
						read(key);
					else if (key.isWritable())
						write(key);
				}
			}

		} catch (IOException e) {
			e.printStackTrace();

		} finally {
			// cleanup
			if (selector != null)
				try {
					selector.close();
				} catch (IOException e) {}

			if (serverSocketChannel != null)
				try {
					serverSocketChannel.close();
				} catch (IOException e) {}
		}
        return null;
	}

}
package models;


import javax.swing.*;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.*;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Server extends SwingWorker<Object, Object >{

	public static int BUF_SIZE	= 1400; // buffer size
	public static String IP	;	// server IP
	public static int PORT;		// server port
    static ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());


    public Server(String IP, int PORT) {

        this.IP = IP;
        this.PORT = PORT;

    }

	public static void accept(SelectionKey key) throws IOException {

		System.out.print("ACCEPT: ");

        ByteBuffer buf = ByteBuffer.allocateDirect(BUF_SIZE);
        ServerSocketChannel serverSocketChannel = (ServerSocketChannel)key.channel();   // initialize from key

        SocketChannel socketChannel = serverSocketChannel.accept();				        // initialize from accept

        socketChannel.configureBlocking(false);
        socketChannel.register(key.selector(), SelectionKey.OP_READ);


        // display remote client address
		System.out.println("Connection from: " + socketChannel.socket().getRemoteSocketAddress());
	}

	public static void read(SelectionKey key) throws IOException {

		System.out.print("READ SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        ByteBuffer buff = ByteBuffer.allocateDirect(BUF_SIZE);

        while(socketChannel.read(buff) > 0){

        }

        socketChannel.register(key.selector(), SelectionKey.OP_WRITE, buff);


    }

	public static void write(SelectionKey key) throws IOException {

        System.out.print("WRITE SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        String filename = "";


        ByteBuffer buf = (ByteBuffer) key.attachment();

        buf.flip();
        String encoding = System.getProperty("file.encoding");
        filename = Charset.forName(encoding).decode(buf).toString();

        RandomAccessFile fromFile = new RandomAccessFile(filename, "rw");
        FileChannel fc = fromFile.getChannel();
        buf = ByteBuffer.allocateDirect(BUF_SIZE);

        while (fc.read(buf) >= 0 || buf.position() > 0) {
            buf.flip();
            socketChannel.write(buf);
            buf.clear();
        }

        fc.close();
        fromFile.close();
        socketChannel.close();


	}

	public Object doInBackground() {

		Selector selector						= null;
		ServerSocketChannel serverSocketChannel	= null;

		try {

            selector = Selector.open();

            serverSocketChannel = ServerSocketChannel.open();
            serverSocketChannel.configureBlocking(false);
            serverSocketChannel.socket().bind(new InetSocketAddress(IP, PORT));
            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);


			// main loop
			while (true) {
				// wait for something to happen

                selector.select();

				// iterate over the events
				for (Iterator<SelectionKey> it = selector.selectedKeys().iterator(); it.hasNext(); ) {
					// get current event and REMOVE it from the list!!!
					SelectionKey key = it.next();
					it.remove();

					if (key.isAcceptable())
                        accept(key);
					else if (key.isReadable())
						read(key);
					else if (key.isWritable())
						write(key);
				}
			}

		} catch (IOException e) {
			e.printStackTrace();

		} finally {
			// cleanup
			if (selector != null)
				try {
					selector.close();
				} catch (IOException e) {}

			if (serverSocketChannel != null)
				try {
					serverSocketChannel.close();
				} catch (IOException e) {}
		}
        return null;
	}

}
package models;


import javax.swing.*;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.*;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Server extends SwingWorker<Object, Object >{

	public static int BUF_SIZE	= 1400; // buffer size
	public static String IP	;	// server IP
	public static int PORT;		// server port
    static ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());


    public Server(String IP, int PORT) {

        this.IP = IP;
        this.PORT = PORT;

    }

	public static void accept(SelectionKey key) throws IOException {

		System.out.print("ACCEPT: ");

        ByteBuffer buf = ByteBuffer.allocateDirect(BUF_SIZE);
        ServerSocketChannel serverSocketChannel = (ServerSocketChannel)key.channel();   // initialize from key

        SocketChannel socketChannel = serverSocketChannel.accept();				        // initialize from accept

        socketChannel.configureBlocking(false);
        socketChannel.register(key.selector(), SelectionKey.OP_READ);


        // display remote client address
		System.out.println("Connection from: " + socketChannel.socket().getRemoteSocketAddress());
	}

	public static void read(SelectionKey key) throws IOException {

		System.out.print("READ SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        ByteBuffer buff = ByteBuffer.allocateDirect(BUF_SIZE);

        while(socketChannel.read(buff) > 0){

        }

        socketChannel.register(key.selector(), SelectionKey.OP_WRITE, buff);


    }

	public static void write(SelectionKey key) throws IOException {

        System.out.print("WRITE SERVER: ");
        SocketChannel socketChannel = (SocketChannel)key.channel();
        String filename = "";


        ByteBuffer buf = (ByteBuffer) key.attachment();

        buf.flip();
        String encoding = System.getProperty("file.encoding");
        filename = Charset.forName(encoding).decode(buf).toString();

        RandomAccessFile fromFile = new RandomAccessFile(filename, "rw");
        FileChannel fc = fromFile.getChannel();
        buf = ByteBuffer.allocateDirect(BUF_SIZE);

        while (fc.read(buf) >= 0 || buf.position() > 0) {
            buf.flip();
            socketChannel.write(buf);
            buf.clear();
        }

        fc.close();
        fromFile.close();
        socketChannel.close();


	}

	public Object doInBackground() {

		Selector selector						= null;
		ServerSocketChannel serverSocketChannel	= null;

		try {

            selector = Selector.open();

            serverSocketChannel = ServerSocketChannel.open();
            serverSocketChannel.configureBlocking(false);
            serverSocketChannel.socket().bind(new InetSocketAddress(IP, PORT));
            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);


			// main loop
			while (true) {
				// wait for something to happen

                selector.select();

				// iterate over the events
				for (Iterator<SelectionKey> it = selector.selectedKeys().iterator(); it.hasNext(); ) {
					// get current event and REMOVE it from the list!!!
					SelectionKey key = it.next();
					it.remove();

					if (key.isAcceptable())
                        accept(key);
					else if (key.isReadable())
						read(key);
					else if (key.isWritable())
						write(key);
				}
			}

		} catch (IOException e) {
			e.printStackTrace();

		} finally {
			// cleanup
			if (selector != null)
				try {
					selector.close();
				} catch (IOException e) {}

			if (serverSocketChannel != null)
				try {
					serverSocketChannel.close();
				} catch (IOException e) {}
		}
        return null;
	}

}
